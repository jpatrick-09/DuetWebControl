{"remainingRequest":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\components\\charts\\TemperatureChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\components\\charts\\TemperatureChart.vue","mtime":1592248188514},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["TemperatureChart.vue"],"names":[],"mappings":"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","sourcesContent":["<style scoped>\r\n.card {\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\twidth: 100%;\r\n}\r\n\r\n.content {\r\n\tposition: relative;\r\n}\r\n\r\n.content > canvas {\r\n\tposition: absolute;\r\n}\r\n</style>\r\n\r\n<template>\r\n\t<v-card class=\"d-flex flex-column flex-grow-1\">\r\n\t\t<v-card-title class=\"pt-2 pb-0\">\r\n\t\t\t<v-icon class=\"mr-1\">mdi-chart-timeline-variant</v-icon> {{ $t('chart.temperature.caption') }}\r\n\t\t</v-card-title>\r\n\r\n\t\t<v-card-text v-show=\"hasTemperaturesToDisplay\" class=\"content flex-grow-1 px-2 py-0\">\r\n\t\t\t<canvas ref=\"chart\"></canvas>\r\n\t\t</v-card-text>\r\n\r\n\t\t<v-spacer v-show=\"!hasTemperaturesToDisplay\"></v-spacer>\r\n\t\t<v-card-text class=\"pa-0\" v-show=\"!hasTemperaturesToDisplay\">\r\n\t\t\t<v-alert :value=\"true\" type=\"info\" class=\"mb-0\">\r\n\t\t\t\t{{ $t('chart.temperature.noData') }}\r\n\t\t\t</v-alert>\r\n\t\t</v-card-text>\r\n\t</v-card>\r\n</template>\r\n\r\n<script>\r\n'use strict'\r\n\r\nimport Chart from 'chart.js'\r\nimport { mapState, mapGetters } from 'vuex'\r\n\r\nimport i18n from '../../i18n'\r\nimport { defaultMachine } from '../../store/machine'\r\nimport { getRealHeaterColor } from '../../utils/colors.js'\r\n\r\nconst sampleInterval = 1000\t\t\t// ms\r\nconst defaultMaxTemperature = 300\t// degC\r\nconst maxSampleTime = 600000\t\t// 10min (in ms)\r\n\r\nfunction makeDataset(index, extra, label, numSamples) {\r\n\tconst color = getRealHeaterColor(index, extra), dataset = {\r\n\t\tindex,\r\n\t\textra,\r\n\t\tlabel,\r\n\t\tfill: false,\r\n\t\tbackgroundColor: color,\r\n\t\tborderColor: color,\r\n\t\tborderDash: extra ? [10, 5] : undefined,\r\n\t\tborderWidth: 2,\r\n\t\tdata: [],\r\n\t\tlocale: i18n.locale,\r\n\t\tpointRadius: 0,\r\n\t\tpointHitRadius: 0,\r\n\t\tshowLine: true\r\n\t};\r\n\tdataset.data = (new Array(numSamples)).fill(NaN);\r\n\treturn dataset;\r\n}\r\n\r\nconst tempSamples = {\r\n\t[defaultMachine]: {\r\n\t\ttimes: [],\r\n\t\ttemps: []\r\n\t}\r\n}\r\n\r\nfunction pushSeriesData(machine, index, extra, sensor) {\r\n\t// Get series from dataset\r\n\tconst machineData = tempSamples[machine];\r\n\tlet dataset = machineData.temps.find(function(item) {\r\n\t\tif (item.index === index && item.extra === extra) {\r\n\t\t\treturn item;\r\n\t\t}\r\n\t});\r\n\r\n\t// Check if the dataset has to be created first\r\n\tif (!dataset || dataset.locale !== i18n.locale || dataset.rawLabel !== sensor.name) {\r\n\t\tlet name;\r\n\t\tif (sensor.name) {\r\n\t\t\tconst matches = /(.*)\\[(.*)\\]$/.exec(sensor.name);\r\n\t\t\tname = matches ? matches[1] : sensor.name;\r\n\t\t} else {\r\n\t\t\tname = i18n.t('chart.temperature.heater', [index]);\r\n\t\t}\r\n\r\n\t\tif (dataset) {\r\n\t\t\tdataset.rawLabel = sensor.name;\r\n\t\t\tdataset.label = name;\r\n\t\t\tdataset.locale = i18n.locale;\r\n\t\t} else {\r\n\t\t\tdataset = makeDataset(index, extra, name, tempSamples[machine].times.length);\r\n\t\t\tmachineData.temps.push(dataset);\r\n\t\t}\r\n\t}\r\n\r\n\t// Add new sample\r\n\tdataset.data.push(sensor.lastReading);\r\n}\r\n\r\nlet storeSubscribed = false, instances = []\r\n\r\nexport default {\r\n\tcomputed: {\r\n\t\t...mapState(['selectedMachine']),\r\n\t\t...mapGetters(['isConnected']),\r\n\t\t...mapGetters('machine', ['hasTemperaturesToDisplay']),\r\n\t\t...mapGetters('machine/model', ['maxHeaterTemperature']),\r\n\t\t...mapState('machine/model', ['heat']),\r\n\t\t...mapState('machine/settings', ['displayedExtraTemperatures']),\r\n\t\t...mapState('settings', ['darkTheme'])\r\n\t},\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tchart: null,\r\n\t\t\tpauseUpdate: false\r\n\t\t}\r\n\t},\r\n\tmethods: {\r\n\t\tupdate() {\r\n\t\t\tthis.chart.config.options.scales.yAxes[0].ticks.max = this.maxHeaterTemperature || defaultMaxTemperature;\r\n\t\t\tthis.chart.config.options.scales.xAxes[0].ticks.min = new Date() - maxSampleTime;\r\n\t\t\tthis.chart.config.options.scales.xAxes[0].ticks.max = new Date();\r\n\t\t\tthis.chart.update();\r\n\t\t},\r\n\t\tapplyDarkTheme(active) {\r\n\t\t\tconst legendColor = active ? '#FFF' : 'rgba(0,0,0,0.87)';\r\n\t\t\tthis.chart.config.options.legend.labels.fontColor = legendColor;\r\n\r\n\t\t\tconst ticksColor = active ? '#FFF' : '#666';\r\n\t\t\tthis.chart.config.options.scales.xAxes[0].ticks.major.fontColor = ticksColor;\r\n\t\t\tthis.chart.config.options.scales.xAxes[0].ticks.minor.fontColor = ticksColor;\r\n\t\t\tthis.chart.config.options.scales.yAxes[0].ticks.major.fontColor = ticksColor;\r\n\t\t\tthis.chart.config.options.scales.yAxes[0].ticks.minor.fontColor = ticksColor;\r\n\r\n\t\t\tconst gridLineColor = active ? 'rgba(255,255,255,0.15)' : 'rgba(0,0,0,0.15)';\r\n\t\t\tthis.chart.config.options.scales.xAxes[0].gridLines.color = gridLineColor;\r\n\t\t\tthis.chart.config.options.scales.yAxes[0].gridLines.color = gridLineColor;\r\n\t\t\tthis.chart.config.options.scales.yAxes[0].gridLines.zeroLineColor = gridLineColor;\r\n\r\n\t\t\tthis.chart.update();\r\n\t\t}\r\n\t},\r\n\tmounted() {\r\n\t\t// Create new chart options. Don't use data for the following because it should not be reactive\r\n\t\tthis.options = {\r\n\t\t\tanimation: {\r\n\t\t\t\tduration: 0\t\t\t\t\t// general animation time\r\n\t\t\t},\r\n\t\t\telements: {\r\n\t\t\t\tline: {\r\n\t\t\t\t\ttension: 0\t\t\t\t// disable bezier curves\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tlegend: {\r\n\t\t\t\tlabels: {\r\n\t\t\t\t\tfilter: (legendItem, data) => data.datasets[legendItem.datasetIndex].showLine,\r\n\t\t\t\t\tfontFamily: 'Roboto,sans-serif'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tmaintainAspectRatio: false,\r\n\t\t\tresponsive: true,\r\n\t\t\tresponsiveAnimationDuration: 0, // animation duration after a resize\r\n\t\t\tscales: {\r\n\t\t\t\txAxes: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tgridLines: {\r\n\t\t\t\t\t\t\tcolor: 'rgba(0,0,0,0.2)',\r\n\t\t\t\t\t\t\tdisplay: true\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tticks: {\r\n\t\t\t\t\t\t\tmin: new Date() - maxSampleTime,\r\n\t\t\t\t\t\t\tmax: new Date(),\r\n\t\t\t\t\t\t\tminor: {\r\n\t\t\t\t\t\t\t\tfontColor: 'rgba(0,0,0,0.87)',\r\n\t\t\t\t\t\t\t\tfontFamily: 'Roboto,sans-serif'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tmajor: {\r\n\t\t\t\t\t\t\t\tfontColor: 'rgba(0,0,0,0.87)',\r\n\t\t\t\t\t\t\t\tfontFamily: 'Roboto,sans-serif'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\ttime: {\r\n\t\t\t\t\t\t\tunit: 'minute',\r\n\t\t\t\t\t\t\tdisplayFormats: {\r\n\t\t\t\t\t\t\t\tminute: 'HH:mm'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\ttype: 'time',\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\tyAxes: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tgridLines: {\r\n\t\t\t\t\t\t\tcolor: 'rgba(0,0,0,0.2)',\r\n\t\t\t\t\t\t\tzeroLineColor: 'rgba(0,0,0,0.2)',\r\n\t\t\t\t\t\t\tdisplay: true\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tticks: {\r\n\t\t\t\t\t\t\tminor: {\r\n\t\t\t\t\t\t\t\tfontColor: '#666',\r\n\t\t\t\t\t\t\t\tfontFamily: 'Roboto,sans-serif'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tmajor: {\r\n\t\t\t\t\t\t\t\tfontColor: '#666',\r\n\t\t\t\t\t\t\t\tfontFamily: 'Roboto,sans-serif'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tmin: 0,\r\n\t\t\t\t\t\t\tmax: defaultMaxTemperature,\r\n\t\t\t\t\t\t\tstepSize: 50\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Create the dataset if necessary\r\n\t\tif (tempSamples[this.selectedMachine] === undefined) {\r\n\t\t\ttempSamples[this.selectedMachine] = {\r\n\t\t\t\ttimes: [],\r\n\t\t\t\ttemps: []\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Create the chart\r\n\t\tthis.chart = Chart.Line(this.$refs.chart, {\r\n\t\t\toptions: this.options,\r\n\t\t\tdata: {\r\n\t\t\t\tlabels: tempSamples[this.selectedMachine].times,\r\n\t\t\t\tdatasets: tempSamples[this.selectedMachine].temps\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.applyDarkTheme(this.darkTheme);\r\n\r\n\t\t// Keep track of updates\r\n\t\tinstances.push(this);\r\n\t\tif (!storeSubscribed) {\r\n\t\t\tthis.$store.subscribe((mutation, state) => {\r\n\t\t\t\tif (mutation.type === 'addMachine') {\r\n\t\t\t\t\t// Machine has been added\r\n\t\t\t\t\ttempSamples[mutation.payload.hostname] = {\r\n\t\t\t\t\t\ttimes: [],\r\n\t\t\t\t\t\ttemps: []\r\n\t\t\t\t\t};\r\n\t\t\t\t} else if (mutation.type === 'removeMachine') {\r\n\t\t\t\t\t// Machine has been removed\r\n\t\t\t\t\tdelete tempSamples[mutation.payload];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst result = /machines\\/(.+)\\/model\\/update/.exec(mutation.type);\r\n\t\t\t\t\tif (result) {\r\n\t\t\t\t\t\t// New data received\r\n\t\t\t\t\t\tconst machine = result[1], dataset = tempSamples[machine], now = new Date();\r\n\t\t\t\t\t\tif (dataset.times.length === 0 || now - dataset.times[dataset.times.length - 1] > sampleInterval) {\r\n\t\t\t\t\t\t\t// Record sensor temperatures\r\n\t\t\t\t\t\t\tstate.machines[machine].model.sensors.analog.forEach(function(sensor, sensorIndex) {\r\n\t\t\t\t\t\t\t\tif (sensor) {\r\n\t\t\t\t\t\t\t\t\tconst heaterIndex = state.machines[machine].model.heat.heaters.findIndex(heater => heater && heater.sensor === sensorIndex);\r\n\t\t\t\t\t\t\t\t\tif (heaterIndex !== -1) {\r\n\t\t\t\t\t\t\t\t\t\tpushSeriesData(machine, heaterIndex, false, sensor);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tpushSeriesData(machine, sensorIndex, true, sensor);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t// Record time and deal wih expired temperature samples\r\n\t\t\t\t\t\t\twhile (dataset.times.length && now - dataset.times[0] > maxSampleTime) {\r\n\t\t\t\t\t\t\t\tdataset.times.shift();\r\n\t\t\t\t\t\t\t\tdataset.temps.forEach(data => data.data.shift());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdataset.times.push(now);\r\n\r\n\t\t\t\t\t\t\t// Deal with visibility and tell chart instances to update\r\n\t\t\t\t\t\t\tdataset.temps.forEach(function(dataset) {\r\n\t\t\t\t\t\t\t\tdataset.showLine = !dataset.extra || (this.displayedExtraTemperatures.indexOf(dataset.index) !== -1);\r\n\t\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t\t\tinstances.forEach(instance => instance.update());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tstoreSubscribed = true;\r\n\t\t}\r\n\t},\r\n\tbeforeDestroy() {\r\n\t\t// Don't update this instance any more...\r\n\t\tinstances = instances.filter(instance => instance !== this, this);\r\n\t},\r\n\twatch: {\r\n\t\tdarkTheme(to) {\r\n\t\t\tthis.applyDarkTheme(to);\r\n\t\t},\r\n\t\tselectedMachine(machine) {\r\n\t\t\t// Each chart instance is fixed to the currently selected machine\r\n\t\t\t// Reassign the corresponding dataset whenever the selected machine changes\r\n\t\t\tthis.chart.config.data = {\r\n\t\t\t\tlabels: tempSamples[machine].times,\r\n\t\t\t\tdatasets: tempSamples[machine].temps\r\n\t\t\t};\r\n\t\t\tthis.update();\r\n\t\t}\r\n\t}\r\n}\r\n</script>\r\n"],"sourceRoot":"src/components/charts"}]}