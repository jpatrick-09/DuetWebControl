{"remainingRequest":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\store\\machine\\connector\\BaseConnector.js","dependencies":[{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\store\\machine\\connector\\BaseConnector.js","mtime":1592248188686},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:J3VzZSBzdHJpY3QnOwoKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6XFxVc2Vyc1xcanBhdHJpY2tcXERvY3VtZW50c1xcR2l0SHViXFxEdWV0V2ViQ29udHJvbF9Gb3JrXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICJDOlxcVXNlcnNcXGpwYXRyaWNrXFxEb2N1bWVudHNcXEdpdEh1YlxcRHVldFdlYkNvbnRyb2xfRm9ya1xcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIkM6XFxVc2Vyc1xcanBhdHJpY2tcXERvY3VtZW50c1xcR2l0SHViXFxEdWV0V2ViQ29udHJvbF9Gb3JrXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAiQzpcXFVzZXJzXFxqcGF0cmlja1xcRG9jdW1lbnRzXFxHaXRIdWJcXER1ZXRXZWJDb250cm9sX0ZvcmtcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKaW1wb3J0IHsgTm90SW1wbGVtZW50ZWRFcnJvciwgTmV0d29ya0Vycm9yLCBUaW1lb3V0RXJyb3IsIE9wZXJhdGlvbkNhbmNlbGxlZEVycm9yLCBPcGVyYXRpb25GYWlsZWRFcnJvciwgRmlsZU5vdEZvdW5kRXJyb3IsIEludmFsaWRQYXNzd29yZEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZXJyb3JzLmpzJzsKZXhwb3J0IHZhciBkZWZhdWx0UmVxdWVzdFRpbWVvdXQgPSA0MDAwOyAvLyBtcwovLyBCYXNlIGNsYXNzIGZvciBuZXR3b3JrIGNvbm5lY3RvcnMgdGhhdCBrZWVwIHRoZSBtYWNoaW5lIHN0b3JlIHVwLXRvLWRhdGUKLy8KLy8gSU1QT1JUQU5UOiBXaGVuIGFkZGluZyBuZXcgbWV0aG9kcyB3aXRoIG1vcmUgdGhhbiBvbmUgcGFyYW1ldGVyIHRvIHRoaXMgY2xhc3MsIG1ha2Ugc3VyZSB0bwovLyBlbmNhcHN1bGF0ZSB0aGVzZSBwYXJhbWV0ZXJzIGluIGN1cmx5IGJyYWNlcyAoeyB9KSB0byBleHBhbmQgdGhlIHBheWxvYWQgb2JqZWN0IQovLwoKdmFyIEJhc2VDb25uZWN0b3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIF9jcmVhdGVDbGFzcyhCYXNlQ29ubmVjdG9yLCBudWxsLCBbewogICAga2V5OiAicmVxdWVzdCIsCiAgICAvLyBGdW5jdGlvbiB0byBwZXJmb3JtIGFuIEhUVFAgcmVxdWVzdC4gUmV0dXJucyBhIHByb21pc2UKICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0KG1ldGhvZCwgdXJsKSB7CiAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7CiAgICAgIHZhciBpbnRlcm5hbFVSTCA9IHVybDsKCiAgICAgIGlmIChwYXJhbXMpIHsKICAgICAgICB2YXIgaGFkUGFyYW0gPSBmYWxzZTsKCiAgICAgICAgZm9yICh2YXIga2V5IGluIHBhcmFtcykgewogICAgICAgICAgaW50ZXJuYWxVUkwgKz0gKGhhZFBhcmFtID8gJyYnIDogJz8nKSArIGtleSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXNba2V5XSk7CiAgICAgICAgICBoYWRQYXJhbSA9IHRydWU7CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgICAgIHhoci5vcGVuKG1ldGhvZCwgaW50ZXJuYWxVUkwpOwogICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ3RleHQnOwogICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTsKICAgICAgeGhyLnRpbWVvdXQgPSBkZWZhdWx0UmVxdWVzdFRpbWVvdXQ7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmICh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgaWYgKCF4aHIucmVzcG9uc2VUZXh0KSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmICh4aHIuc3RhdHVzID09PSA0MDEpIHsKICAgICAgICAgICAgcmVqZWN0KG5ldyBJbnZhbGlkUGFzc3dvcmRFcnJvcigpKTsKICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gNDA0KSB7CiAgICAgICAgICAgIHJlamVjdChuZXcgRmlsZU5vdEZvdW5kRXJyb3IoKSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHhoci5zdGF0dXMgPj0gNTAwKSB7CiAgICAgICAgICAgIHJlamVjdChuZXcgT3BlcmF0aW9uRmFpbGVkRXJyb3IoeGhyLnJlc3BvbnNlVGV4dCkpOwogICAgICAgICAgfSBlbHNlIGlmICh4aHIuc3RhdHVzICE9PSAwKSB7CiAgICAgICAgICAgIHJlamVjdChuZXcgT3BlcmF0aW9uRmFpbGVkRXJyb3IoKSk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZWplY3QobmV3IE9wZXJhdGlvbkNhbmNlbGxlZEVycm9yKCkpOwogICAgICAgIH07CgogICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgcmVqZWN0KG5ldyBOZXR3b3JrRXJyb3IoKSk7CiAgICAgICAgfTsKCiAgICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJlamVjdChuZXcgVGltZW91dEVycm9yKCkpOwogICAgICAgIH07CgogICAgICAgIHhoci5zZW5kKG51bGwpOwogICAgICB9KTsKICAgIH0gLy8gUmVnaXN0ZXIgdGhlIGdsb2JhbCBWdWV4IHN0b3JlLiBTdWJzY3JpYmUgdG8gc3RhdGljIGNvbm5lY3RvciBzZXR0aW5ncyBoZXJlCgogIH0sIHsKICAgIGtleTogImluc3RhbGxTdG9yZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zdGFsbFN0b3JlKHN0b3JlKSB7CiAgICAgIEJhc2VDb25uZWN0b3IucHJvdG90eXBlLnN0b3JlID0gc3RvcmU7CiAgICB9IC8vIENvbm5lY3QgdG8gYSBtYWNoaW5lLiBUaHJvdyBvbmUgb2YgdGhlIGVycm9ycyBpbiAnZXJyb3InIGZvciBtb3JlIGdyYW51bGFyIGNvbnRyb2wKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQoKICB9LCB7CiAgICBrZXk6ICJjb25uZWN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfY29ubmVjdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShob3N0bmFtZSwgdXNlcm5hbWUsIHBhc3N3b3JkKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXJyb3IoJ2Nvbm5lY3QnKTsKCiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGNvbm5lY3QoX3gsIF94MiwgX3gzKSB7CiAgICAgICAgcmV0dXJuIF9jb25uZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjb25uZWN0OwogICAgfSgpCiAgfV0pOwoKICBmdW5jdGlvbiBCYXNlQ29ubmVjdG9yKHR5cGUsIGhvc3RuYW1lKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZUNvbm5lY3Rvcik7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJtb2R1bGUiLCBudWxsKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInNldHRpbmdzIiwgbnVsbCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJob3N0bmFtZSIsIG51bGwpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAidHlwZSIsICd1bmtub3duJyk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJ2ZXJib3NlIiwgZmFsc2UpOwoKICAgIHRoaXMudHlwZSA9IHR5cGU7CiAgICB0aGlzLmhvc3RuYW1lID0gaG9zdG5hbWU7CiAgfSAvLyBDYWxsZWQgd2hlbiBhIG5ldyBtYWNoaW5lIG1vZHVsZSBpcyByZWdpc3RlcmVkCgoKICBfY3JlYXRlQ2xhc3MoQmFzZUNvbm5lY3RvciwgW3sKICAgIGtleTogInJlZ2lzdGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3Rlcihtb2R1bGUpIHsKICAgICAgdGhpcy5tb2R1bGUgPSBtb2R1bGU7CiAgICAgIHRoaXMuc2V0dGluZ3MgPSBtb2R1bGUuc3RhdGUuc2V0dGluZ3M7CiAgICB9IC8vIENhbGxlZCBiZWZvcmUgdGhlIG1vZHVsZSBpcyB1bnJlZ2lzdGVyZWQKCiAgfSwgewogICAga2V5OiAidW5yZWdpc3RlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3RlcigpIHsKICAgICAgdGhpcy5tb2R1bGUgPSBudWxsOwogICAgICB0aGlzLnNldHRpbmdzID0gbnVsbDsKICAgIH0gLy8gQ2FsbGVkIHRvIHVwZGF0ZSB0aGUgcHJvZ3Jlc3Mgd2hpbGUgY29ubmVjdGluZyAoaW4gcGVyIGNlbnQpCgogIH0sIHsKICAgIGtleTogImRpc3BhdGNoIiwKICAgIC8vIENhbGxlZCB0byBpbnZva2UgYWN0aW9ucyBvbiB0aGUgcmVnaXN0ZXJlZCBtb2R1bGUKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZGlzcGF0Y2ggPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGFjdGlvbiwgcGF5bG9hZCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubW9kdWxlKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmUuZGlzcGF0Y2goIm1hY2hpbmVzLyIuY29uY2F0KHRoaXMuaG9zdG5hbWUsICIvIikuY29uY2F0KGFjdGlvbiksIHBheWxvYWQpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBkaXNwYXRjaChfeDQsIF94NSkgewogICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGRpc3BhdGNoOwogICAgfSgpCiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqLwogICAgLy8gUmVjb25uZWN0IGFmdGVyIGEgY29ubmVjdGlvbiBlcnJvcgoKICB9LCB7CiAgICBrZXk6ICJyZWNvbm5lY3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWNvbm5lY3QgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcigncmVjb25uZWN0Jyk7CgogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHJlY29ubmVjdCgpIHsKICAgICAgICByZXR1cm4gX3JlY29ubmVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcmVjb25uZWN0OwogICAgfSgpIC8vIERpc2Nvbm5lY3QgZnJvbSB0aGUgY3VycmVudCBtYWNoaW5lCgogIH0sIHsKICAgIGtleTogImRpc2Nvbm5lY3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9kaXNjb25uZWN0ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXJyb3IoJ2Rpc2Nvbm5lY3QnKTsKCiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0KTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZGlzY29ubmVjdCgpIHsKICAgICAgICByZXR1cm4gX2Rpc2Nvbm5lY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGRpc2Nvbm5lY3Q7CiAgICB9KCkgLy8gU2VuZCBhIEctL00tL1QtY29kZSB0byB0aGUgbWFjaGluZS4gUmV0dXJucyBhIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIGZpbmlzaGVkCiAgICAvLyBjb2RlOiBDb2RlIHRvIHNlbmQKCiAgfSwgewogICAga2V5OiAic2VuZENvZGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zZW5kQ29kZSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoY29kZSkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcignc2VuZENvZGUnKTsKCiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1KTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gc2VuZENvZGUoX3g2KSB7CiAgICAgICAgcmV0dXJuIF9zZW5kQ29kZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gc2VuZENvZGU7CiAgICB9KCkgLy8gVXBsb2FkIGEgZmlsZSBhc3luY2hyb25vdXNseQogICAgLy8gZmlsZW5hbWU6IERlc3RpbmF0aW9uIG9mIHRoZSBmaWxlCiAgICAvLyBjb250ZW50OiBEYXRhIG9mIHRoZSBmaWxlCiAgICAvLyBjYW5jZWxsYXRpb25Ub2tlbjogT2JqZWN0IHdoaWNoIGlzIHBvcHVsYXRlZCB3aXRoIGEgJ2NhbmNlbCcgbWV0aG9kCiAgICAvLyBvblByb2dyZXNzOiBGdW5jdGlvbiBjYWxsZWQgd2hlbiBkYXRhIGlzIGJlaW5nIHRyYW5zZmVycmVkIHdpdGggdHdvIHBhcmFtZXRlcnMgKGxvYWRlZCwgdG90YWwpCgogIH0sIHsKICAgIGtleTogInVwbG9hZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3VwbG9hZCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoX3JlZikgewogICAgICAgIHZhciBmaWxlbmFtZSwgY29udGVudCwgY2FuY2VsbGF0aW9uVG9rZW4sIG9uUHJvZ3Jlc3M7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gX3JlZi5maWxlbmFtZSwgY29udGVudCA9IF9yZWYuY29udGVudCwgY2FuY2VsbGF0aW9uVG9rZW4gPSBfcmVmLmNhbmNlbGxhdGlvblRva2VuLCBvblByb2dyZXNzID0gX3JlZi5vblByb2dyZXNzOwogICAgICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXJyb3IoJ3VwbG9hZCcpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiB1cGxvYWQoX3g3KSB7CiAgICAgICAgcmV0dXJuIF91cGxvYWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHVwbG9hZDsKICAgIH0oKSAvLyBEZWxldGUgYSBmaWxlCiAgICAvLyBmaWxlbmFtZTogRmlsZW5hbWUgdG8gZGVsZXRlCgogIH0sIHsKICAgIGtleTogImRlbGV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2RlbGV0ZTIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KGZpbGVuYW1lKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEVycm9yKCdkZWxldGUnKTsKCiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU3KTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gX2RlbGV0ZShfeDgpIHsKICAgICAgICByZXR1cm4gX2RlbGV0ZTIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIF9kZWxldGU7CiAgICB9KCkgLy8gTW92ZSBhIGZpbGUKICAgIC8vIGZyb206IFNvdXJjZSBmaWxlCiAgICAvLyB0bzogRGVzdGluYXRpb24gZmlsZQogICAgLy8gZm9yY2U6IE92ZXJ3cml0ZSBmaWxlIGlmIGl0IGFscmVhZHkgZXhpc3RzCgogIH0sIHsKICAgIGtleTogIm1vdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9tb3ZlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOChfcmVmMikgewogICAgICAgIHZhciBmcm9tLCB0bywgZm9yY2U7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGZyb20gPSBfcmVmMi5mcm9tLCB0byA9IF9yZWYyLnRvLCBmb3JjZSA9IF9yZWYyLmZvcmNlOwogICAgICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXJyb3IoJ21vdmUnKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU4KTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gbW92ZShfeDkpIHsKICAgICAgICByZXR1cm4gX21vdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG1vdmU7CiAgICB9KCkgLy8gTWFrZSBhIG5ldyBkaXJlY3Ryb3kgcGF0aAogICAgLy8gZGlyZWN0b3J5OiBQYXRoIG9mIHRoZSBkaXJlY3RvcnkKCiAgfSwgewogICAga2V5OiAibWFrZURpcmVjdG9yeSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX21ha2VEaXJlY3RvcnkgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU5KGRpcmVjdG9yeSkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOSQoX2NvbnRleHQ5KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OS5wcmV2ID0gX2NvbnRleHQ5Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcignbWFrZURpcmVjdG9yeScpOwoKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTkpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBtYWtlRGlyZWN0b3J5KF94MTApIHsKICAgICAgICByZXR1cm4gX21ha2VEaXJlY3RvcnkuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG1ha2VEaXJlY3Rvcnk7CiAgICB9KCkgLy8gRG93bmxvYWQgYSBmaWxlIGFzeW5jaHJvbm91c2x5LiBSZXR1cm5zIHRoZSBmaWxlIGNvbnRlbnQgb24gY29tcGxldGlvbgogICAgLy8gUGFyYW1ldGVyIGNhbiBiZSBlaXRoZXIgdGhlIGZpbGVuYW1lIG9yIGFuIG9iamVjdCB7IGZpbGVuYW1lLCAodHlwZSwgb25Qcm9ncmVzcywgY2FuY2VsbGF0aW9uVG9rZW4pIH0KICAgIC8vIFNlZSBhbHNvIHVwbG9hZCgpCgogIH0sIHsKICAgIGtleTogImRvd25sb2FkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZG93bmxvYWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMChwYXlsb2FkKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMCQoX2NvbnRleHQxMCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDEwLnByZXYgPSBfY29udGV4dDEwLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcignZG93bmxvYWQnKTsKCiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTApOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBkb3dubG9hZChfeDExKSB7CiAgICAgICAgcmV0dXJuIF9kb3dubG9hZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZG93bmxvYWQ7CiAgICB9KCkgLy8gR2V0IHRoZSBmaWxlIGxpc3QuIEVhY2ggaXRlbSBpcyByZXR1cm5lZCBhcyB7IGlzRGlyZWN0b3J5LCBuYW1lLCBzaXplLCBsYXN0TW9kaWZpZWQgfQogICAgLy8gZGlyZWN0b3J5OiBEaXJlY3RvcnkgdG8gcXVlcnkKCiAgfSwgewogICAga2V5OiAiZ2V0RmlsZUxpc3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRGaWxlTGlzdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTExKGRpcmVjdG9yeSkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTEkKF9jb250ZXh0MTEpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMS5wcmV2ID0gX2NvbnRleHQxMS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXJyb3IoJ2dldEZpbGVMaXN0Jyk7CgogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTExKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0RmlsZUxpc3QoX3gxMikgewogICAgICAgIHJldHVybiBfZ2V0RmlsZUxpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldEZpbGVMaXN0OwogICAgfSgpIC8vIEdldCBHLWNvZGUgZmlsZSBpbmZvIGFuZCByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgRmlsZUluZm8KICAgIC8vIGZpbGVuYW1lOiBGaWxlbmFtZSB0byBwYXJzZQoKICB9LCB7CiAgICBrZXk6ICJnZXRGaWxlSW5mbyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldEZpbGVJbmZvID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTIoZmlsZW5hbWUpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEyJChfY29udGV4dDEyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTIucHJldiA9IF9jb250ZXh0MTIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEVycm9yKCdnZXRGaWxlSW5mbycpOwoKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMik7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGdldEZpbGVJbmZvKF94MTMpIHsKICAgICAgICByZXR1cm4gX2dldEZpbGVJbmZvLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRGaWxlSW5mbzsKICAgIH0oKQogICAgLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqLwoKICB9XSwgW3sKICAgIGtleTogInNldENvbm5lY3RpbmdQcm9ncmVzcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29ubmVjdGluZ1Byb2dyZXNzKHByb2dyZXNzKSB7CiAgICAgIEJhc2VDb25uZWN0b3IucHJvdG90eXBlLnN0b3JlLmNvbW1pdCgnc2V0Q29ubmVjdGluZ1Byb2dyZXNzJywgcHJvZ3Jlc3MpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEJhc2VDb25uZWN0b3I7Cn0oKTsKCmV4cG9ydCBkZWZhdWx0IEJhc2VDb25uZWN0b3I7"},{"version":3,"sources":["C:/Users/jpatrick/Documents/GitHub/DuetWebControl_Fork/src/store/machine/connector/BaseConnector.js"],"names":["NotImplementedError","NetworkError","TimeoutError","OperationCancelledError","OperationFailedError","FileNotFoundError","InvalidPasswordError","defaultRequestTimeout","BaseConnector","method","url","params","internalURL","hadParam","key","encodeURIComponent","xhr","XMLHttpRequest","open","responseType","setRequestHeader","timeout","Promise","resolve","reject","onload","status","responseText","JSON","parse","e","onabort","onerror","ontimeout","send","store","prototype","hostname","username","password","type","module","settings","state","action","payload","dispatch","code","filename","content","cancellationToken","onProgress","from","to","force","directory","progress","commit"],"mappings":"AAAA;;;;;;;;;AAEA,SACCA,mBADD,EAECC,YAFD,EAEeC,YAFf,EAE6BC,uBAF7B,EAEsDC,oBAFtD,EAGCC,iBAHD,EAGoBC,oBAHpB,QAIO,0BAJP;AAMA,OAAO,IAAMC,qBAAqB,GAAG,IAA9B,C,CAAuC;AAE9C;AACA;AACA;AACA;AACA;;IACMC,a;;;AACL;4BACeC,M,EAAQC,G,EAAoB;AAAA,UAAfC,MAAe,uEAAN,IAAM;AAC1C,UAAIC,WAAW,GAAGF,GAAlB;;AACA,UAAIC,MAAJ,EAAY;AACX,YAAIE,QAAQ,GAAG,KAAf;;AACA,aAAK,IAAIC,GAAT,IAAgBH,MAAhB,EAAwB;AACvBC,UAAAA,WAAW,IAAI,CAACC,QAAQ,GAAG,GAAH,GAAS,GAAlB,IAAyBC,GAAzB,GAA+B,GAA/B,GAAqCC,kBAAkB,CAACJ,MAAM,CAACG,GAAD,CAAP,CAAtE;AACAD,UAAAA,QAAQ,GAAG,IAAX;AACA;AACD;;AAED,UAAMG,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACAD,MAAAA,GAAG,CAACE,IAAJ,CAAST,MAAT,EAAiBG,WAAjB;AACAI,MAAAA,GAAG,CAACG,YAAJ,GAAmB,MAAnB;AACAH,MAAAA,GAAG,CAACI,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAJ,MAAAA,GAAG,CAACK,OAAJ,GAAcd,qBAAd;AAEA,aAAO,IAAIe,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvCR,QAAAA,GAAG,CAACS,MAAJ,GAAa,YAAW;AACvB,cAAIT,GAAG,CAACU,MAAJ,IAAc,GAAd,IAAqBV,GAAG,CAACU,MAAJ,GAAa,GAAtC,EAA2C;AAC1C,gBAAI;AACH,kBAAI,CAACV,GAAG,CAACW,YAAT,EAAuB;AACtBJ,gBAAAA,OAAO,CAAC,IAAD,CAAP;AACA,eAFD,MAEO;AACNA,gBAAAA,OAAO,CAACK,IAAI,CAACC,KAAL,CAAWb,GAAG,CAACW,YAAf,CAAD,CAAP;AACA;AACD,aAND,CAME,OAAOG,CAAP,EAAU;AACXN,cAAAA,MAAM,CAACM,CAAD,CAAN;AACA;AACD,WAVD,MAUO,IAAId,GAAG,CAACU,MAAJ,KAAe,GAAnB,EAAwB;AAC9BF,YAAAA,MAAM,CAAC,IAAIlB,oBAAJ,EAAD,CAAN;AACA,WAFM,MAEA,IAAIU,GAAG,CAACU,MAAJ,KAAe,GAAnB,EAAwB;AAC9BF,YAAAA,MAAM,CAAC,IAAInB,iBAAJ,EAAD,CAAN;AACA,WAFM,MAEA,IAAIW,GAAG,CAACU,MAAJ,IAAc,GAAlB,EAAuB;AAC7BF,YAAAA,MAAM,CAAC,IAAIpB,oBAAJ,CAAyBY,GAAG,CAACW,YAA7B,CAAD,CAAN;AACA,WAFM,MAEA,IAAIX,GAAG,CAACU,MAAJ,KAAe,CAAnB,EAAsB;AAC5BF,YAAAA,MAAM,CAAC,IAAIpB,oBAAJ,EAAD,CAAN;AACA;AACD,SApBD;;AAqBAY,QAAAA,GAAG,CAACe,OAAJ,GAAc,YAAW;AACxBP,UAAAA,MAAM,CAAC,IAAIrB,uBAAJ,EAAD,CAAN;AACA,SAFD;;AAGAa,QAAAA,GAAG,CAACgB,OAAJ,GAAc,YAAW;AACxBR,UAAAA,MAAM,CAAC,IAAIvB,YAAJ,EAAD,CAAN;AACA,SAFD;;AAGAe,QAAAA,GAAG,CAACiB,SAAJ,GAAgB,YAAY;AAC3BT,UAAAA,MAAM,CAAC,IAAItB,YAAJ,EAAD,CAAN;AACA,SAFD;;AAGAc,QAAAA,GAAG,CAACkB,IAAJ,CAAS,IAAT;AACA,OAhCM,CAAP;AAiCA,K,CAED;;;;iCACoBC,K,EAAO;AAC1B3B,MAAAA,aAAa,CAAC4B,SAAd,CAAwBD,KAAxB,GAAgCA,KAAhC;AACA,K,CAED;AACA;;;;;8FACqBE,Q,EAAUC,Q,EAAUC,Q;;;;;sBAAkB,IAAIvC,mBAAJ,CAAwB,SAAxB,C;;;;;;;;;;;;;;;;;;AAQ3D,yBAAYwC,IAAZ,EAAkBH,QAAlB,EAA4B;AAAA;;AAAA,oCANnB,IAMmB;;AAAA,sCALjB,IAKiB;;AAAA,sCAJjB,IAIiB;;AAAA,kCAHrB,SAGqB;;AAAA,qCAFlB,KAEkB;;AAC3B,SAAKG,IAAL,GAAYA,IAAZ;AACA,SAAKH,QAAL,GAAgBA,QAAhB;AACA,G,CAED;;;;;6BACSI,M,EAAQ;AAChB,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKC,QAAL,GAAgBD,MAAM,CAACE,KAAP,CAAaD,QAA7B;AACA,K,CAED;;;;iCACa;AACZ,WAAKD,MAAL,GAAc,IAAd;AACA,WAAKC,QAAL,GAAgB,IAAhB;AACA,K,CAED;;;;AAKA;;gGACeE,M,EAAQC,O;;;;;qBAClB,KAAKJ,M;;;;;;uBACF,KAAKN,KAAL,CAAWW,QAAX,oBAAgC,KAAKT,QAArC,cAAiDO,MAAjD,GAA2DC,OAA3D,C;;;;;;;;;;;;;;;;AAIR;AAEA;;;;;;;;;;sBAC0B,IAAI7C,mBAAJ,CAAwB,WAAxB,C;;;;;;;;;;;;;;;QAE1B;;;;;;;;;;sBAC2B,IAAIA,mBAAJ,CAAwB,YAAxB,C;;;;;;;;;;;;;;;QAE3B;AACA;;;;;gGACe+C,I;;;;;sBAAc,IAAI/C,mBAAJ,CAAwB,UAAxB,C;;;;;;;;;;;;;;;QAE7B;AACA;AACA;AACA;AACA;;;;;;;;;;;AACegD,gBAAAA,Q,QAAAA,Q,EAAUC,O,QAAAA,O,EAASC,iB,QAAAA,iB,EAAmBC,U,QAAAA,U;sBAAsB,IAAInD,mBAAJ,CAAwB,QAAxB,C;;;;;;;;;;;;;;;QAE3E;AACA;;;;;+FACagD,Q;;;;;sBAAkB,IAAIhD,mBAAJ,CAAwB,QAAxB,C;;;;;;;;;;;;;;;QAE/B;AACA;AACA;AACA;;;;;;;;;;;AACaoD,gBAAAA,I,SAAAA,I,EAAMC,E,SAAAA,E,EAAIC,K,SAAAA,K;sBAAiB,IAAItD,mBAAJ,CAAwB,MAAxB,C;;;;;;;;;;;;;;;QAExC;AACA;;;;;qGACoBuD,S;;;;;sBAAmB,IAAIvD,mBAAJ,CAAwB,eAAxB,C;;;;;;;;;;;;;;;QAEvC;AACA;AACA;;;;;iGACe6C,O;;;;;sBAAiB,IAAI7C,mBAAJ,CAAwB,UAAxB,C;;;;;;;;;;;;;;;QAEhC;AACA;;;;;oGACkBuD,S;;;;;sBAAmB,IAAIvD,mBAAJ,CAAwB,aAAxB,C;;;;;;;;;;;;;;;QAErC;AACA;;;;;oGACkBgD,Q;;;;;sBAAkB,IAAIhD,mBAAJ,CAAwB,aAAxB,C;;;;;;;;;;;;;;;;AAEpC;;;;0CAzD6BwD,Q,EAAU;AACtChD,MAAAA,aAAa,CAAC4B,SAAd,CAAwBD,KAAxB,CAA8BsB,MAA9B,CAAqC,uBAArC,EAA8DD,QAA9D;AACA;;;;;;AA0DF,eAAehD,aAAf","sourcesContent":["'use strict'\r\n\r\nimport {\r\n\tNotImplementedError,\r\n\tNetworkError, TimeoutError, OperationCancelledError, OperationFailedError,\r\n\tFileNotFoundError, InvalidPasswordError\r\n} from '../../../utils/errors.js'\r\n\r\nexport const defaultRequestTimeout = 4000;\t\t\t\t// ms\r\n\r\n// Base class for network connectors that keep the machine store up-to-date\r\n//\r\n// IMPORTANT: When adding new methods with more than one parameter to this class, make sure to\r\n// encapsulate these parameters in curly braces ({ }) to expand the payload object!\r\n//\r\nclass BaseConnector {\r\n\t// Function to perform an HTTP request. Returns a promise\r\n\tstatic request(method, url, params = null) {\r\n\t\tlet internalURL = url;\r\n\t\tif (params) {\r\n\t\t\tlet hadParam = false;\r\n\t\t\tfor (let key in params) {\r\n\t\t\t\tinternalURL += (hadParam ? '&' : '?') + key + '=' + encodeURIComponent(params[key]);\r\n\t\t\t\thadParam = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst xhr = new XMLHttpRequest();\r\n\t\txhr.open(method, internalURL);\r\n\t\txhr.responseType = 'text';\r\n\t\txhr.setRequestHeader('Content-Type', 'application/json');\r\n\t\txhr.timeout = defaultRequestTimeout;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\txhr.onload = function() {\r\n\t\t\t\tif (xhr.status >= 200 && xhr.status < 300) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tif (!xhr.responseText) {\r\n\t\t\t\t\t\t\tresolve(null);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresolve(JSON.parse(xhr.responseText));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (xhr.status === 401) {\r\n\t\t\t\t\treject(new InvalidPasswordError());\r\n\t\t\t\t} else if (xhr.status === 404) {\r\n\t\t\t\t\treject(new FileNotFoundError());\r\n\t\t\t\t} else if (xhr.status >= 500) {\r\n\t\t\t\t\treject(new OperationFailedError(xhr.responseText));\r\n\t\t\t\t} else if (xhr.status !== 0) {\r\n\t\t\t\t\treject(new OperationFailedError());\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\txhr.onabort = function() {\r\n\t\t\t\treject(new OperationCancelledError());\r\n\t\t\t}\r\n\t\t\txhr.onerror = function() {\r\n\t\t\t\treject(new NetworkError());\r\n\t\t\t};\r\n\t\t\txhr.ontimeout = function () {\r\n\t\t\t\treject(new TimeoutError());\r\n\t\t\t};\r\n\t\t\txhr.send(null);\r\n\t\t});\r\n\t}\r\n\r\n\t// Register the global Vuex store. Subscribe to static connector settings here\r\n\tstatic installStore(store) {\r\n\t\tBaseConnector.prototype.store = store;\r\n\t}\r\n\r\n\t// Connect to a machine. Throw one of the errors in 'error' for more granular control\r\n\t// eslint-disable-next-line\r\n\tstatic async connect(hostname, username, password) { throw new NotImplementedError('connect'); }\r\n\r\n\tmodule = null\r\n\tsettings = null\r\n\thostname = null\r\n\ttype = 'unknown'\r\n\tverbose = false\r\n\r\n\tconstructor(type, hostname) {\r\n\t\tthis.type = type;\r\n\t\tthis.hostname = hostname;\r\n\t}\r\n\r\n\t// Called when a new machine module is registered\r\n\tregister(module) {\r\n\t\tthis.module = module;\r\n\t\tthis.settings = module.state.settings;\r\n\t}\r\n\r\n\t// Called before the module is unregistered\r\n\tunregister() {\r\n\t\tthis.module = null;\r\n\t\tthis.settings = null;\r\n\t}\r\n\r\n\t// Called to update the progress while connecting (in per cent)\r\n\tstatic setConnectingProgress(progress) {\r\n\t\tBaseConnector.prototype.store.commit('setConnectingProgress', progress);\r\n\t}\r\n\r\n\t// Called to invoke actions on the registered module\r\n\tasync dispatch(action, payload) {\r\n\t\tif (this.module) {\r\n\t\t\tawait this.store.dispatch(`machines/${this.hostname}/${action}`, payload);\r\n\t\t}\r\n\t}\r\n\r\n\t/* eslint-disable no-unused-vars */\r\n\r\n\t// Reconnect after a connection error\r\n\tasync reconnect() { throw new NotImplementedError('reconnect'); }\r\n\r\n\t// Disconnect from the current machine\r\n\tasync disconnect() { throw new NotImplementedError('disconnect'); }\r\n\r\n\t// Send a G-/M-/T-code to the machine. Returns a promise that is resolved when finished\r\n\t// code: Code to send\r\n\tasync sendCode(code) { throw new NotImplementedError('sendCode'); }\r\n\r\n\t// Upload a file asynchronously\r\n\t// filename: Destination of the file\r\n\t// content: Data of the file\r\n\t// cancellationToken: Object which is populated with a 'cancel' method\r\n\t// onProgress: Function called when data is being transferred with two parameters (loaded, total)\r\n\tasync upload({ filename, content, cancellationToken, onProgress }) { throw new NotImplementedError('upload'); }\r\n\r\n\t// Delete a file\r\n\t// filename: Filename to delete\r\n\tasync delete(filename) { throw new NotImplementedError('delete'); }\r\n\r\n\t// Move a file\r\n\t// from: Source file\r\n\t// to: Destination file\r\n\t// force: Overwrite file if it already exists\r\n\tasync move({ from, to, force }) { throw new NotImplementedError('move'); }\r\n\r\n\t// Make a new directroy path\r\n\t// directory: Path of the directory\r\n\tasync makeDirectory(directory) { throw new NotImplementedError('makeDirectory'); }\r\n\r\n\t// Download a file asynchronously. Returns the file content on completion\r\n\t// Parameter can be either the filename or an object { filename, (type, onProgress, cancellationToken) }\r\n\t// See also upload()\r\n\tasync download(payload) { throw new NotImplementedError('download'); }\r\n\r\n\t// Get the file list. Each item is returned as { isDirectory, name, size, lastModified }\r\n\t// directory: Directory to query\r\n\tasync getFileList(directory) { throw new NotImplementedError('getFileList'); }\r\n\r\n\t// Get G-code file info and return an instance of FileInfo\r\n\t// filename: Filename to parse\r\n\tasync getFileInfo(filename) { throw new NotImplementedError('getFileInfo'); }\r\n\r\n\t/* eslint-enable no-unused-vars */\r\n}\r\n\r\nexport default BaseConnector\r\n"]}]}