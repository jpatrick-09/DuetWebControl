{"remainingRequest":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\store\\machine\\index.js","dependencies":[{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\store\\machine\\index.js","mtime":1592248188707},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/jpatrick/Documents/GitHub/DuetWebControl_Fork/src/store/machine/index.js"],"names":["mapConnectorActions","cache","model","StatusType","isPrinting","settings","i18n","displayTime","log","logCode","makeFileTransferNotification","showMessage","beep","DisconnectedError","CodeBufferError","InvalidPasswordError","OperationCancelledError","Path","defaultMachine","getModifiedPaths","action","state","segments","type","split","length","selectedMachine","payload","filename","from","to","getModifiedDirectories","map","path","extractDirectory","getModifiedFiles","extractFileName","hostname","connector","namespaced","autoSleep","events","isReconnecting","getters","hasTemperaturesToDisplay","sensors","analog","some","sensor","sensorIndex","heat","heaters","heater","displayedExtraTemperatures","indexOf","actions","reconnect","commit","dispatch","t","console","warn","sendCode","context","code","Object","fromInput","undefined","Boolean","doLog","response","message","upload","content","showProgress","showSuccess","showError","num","count","cancellationToken","startTime","Date","notification","configFile","combine","directories","system","equals","configFileBackup","configBackupFile","move","force","silent","onProgress","secondsPassed","Math","round","hide","download","update","lastBeepFrequency","frequency","lastBeepDuration","duration","lastDisplayMessage","displayMessage","lastStatus","status","job","lastFileName","halted","onConnectionError","error","setTimeout","updating","root","onCodeCompleted","reply","onDirectoryCreated","directory","onFileUploaded","onFileDownloaded","onFileOrDirectoryMoved","onFileOrDirectoryDeleted","mutations","clearLog","push","unregister","setAutoSleep","value","setReconnecting","reconnecting","setHighVerbosity","verbose","setNormalVerbosity","modules"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nimport { mapConnectorActions } from './connector'\r\n\r\nimport cache from './cache.js'\r\nimport model from './model.js'\r\nimport { StatusType, isPrinting } from './modelEnums.js'\r\nimport settings from './settings.js'\r\n\r\nimport i18n from '../../i18n'\r\n\r\nimport { displayTime } from '../../plugins/display.js'\r\nimport { log, logCode } from '../../plugins/logging.js'\r\nimport { makeFileTransferNotification, showMessage } from '../../plugins/toast.js'\r\n\r\nimport beep from '../../utils/beep.js'\r\nimport { DisconnectedError, CodeBufferError, InvalidPasswordError, OperationCancelledError } from '../../utils/errors.js'\r\nimport Path from '../../utils/path.js'\r\n\r\nexport const defaultMachine = '[default]'\t\t\t// must not be a valid hostname\r\n\r\nexport function getModifiedPaths(action, state) {\r\n\tconst segments = action.type.split('/');\r\n\tif (segments.length === 3 && segments[1] === state.selectedMachine) {\r\n\t\tif (segments[2] === 'onDirectoryCreated' || segments[2] === 'onFileOrDirectoryDeleted') {\r\n\t\t\treturn [action.payload];\r\n\t\t}\r\n\t\tif (segments[2] === 'onFileUploaded') {\r\n\t\t\treturn [action.payload.filename];\r\n\t\t}\r\n\t\tif (segments[2] === 'onFileOrDirectoryMoved') {\r\n\t\t\treturn [action.payload.from, action.payload.to];\r\n\t\t}\r\n\t}\r\n\treturn [];\r\n}\r\n\r\nexport function getModifiedDirectories(action, state) {\r\n\treturn getModifiedPaths(action, state).map(path => Path.extractDirectory(path));\r\n}\r\n\r\nexport function getModifiedFiles(action, state) {\r\n\treturn getModifiedPaths(action, state).map(path => Path.extractFileName(path));\r\n}\r\n\r\nexport default function(hostname, connector) {\r\n\treturn {\r\n\t\tnamespaced: true,\r\n\t\tstate: {\r\n\t\t\tautoSleep: false,\r\n\t\t\tevents: [],\t\t\t\t\t\t\t\t// provides machine events in the form of { date, type, title, message }\r\n\t\t\tisReconnecting: false,\r\n\t\t},\r\n\t\tgetters: {\r\n\t\t\tconnector: () => connector,\r\n\t\t\thasTemperaturesToDisplay: state => state.model.sensors.analog.some(function(sensor, sensorIndex) {\r\n\t\t\t\treturn (state.model.heat.heaters.some(heater => heater && heater.sensor === sensorIndex) ||\r\n\t\t\t\t\t\tstate.settings.displayedExtraTemperatures.indexOf(sensorIndex) !== -1);\r\n\t\t\t})\r\n\t\t},\r\n\t\tactions: {\r\n\t\t\t...mapConnectorActions(connector, ['disconnect', 'delete', 'move', 'makeDirectory', 'getFileList', 'getFileInfo']),\r\n\r\n\t\t\t// Reconnect after a connection error\r\n\t\t\tasync reconnect({ commit, dispatch }) {\r\n\t\t\t\tcommit('setReconnecting', true);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tawait connector.reconnect();\r\n\t\t\t\t\tcommit('setReconnecting', false);\r\n\t\t\t\t\tlog('success', i18n.t('events.reconnected'));\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.warn(e);\r\n\t\t\t\t\tdispatch('onConnectionError', e);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Send a code and log the result (if applicable)\r\n\t\t\t// Parameter can be either a string or an object { code, (fromInput = false, log = true) }\r\n\t\t\tasync sendCode(context, payload) {\r\n\t\t\t\tconst code = (payload instanceof Object) ? payload.code : payload;\r\n\t\t\t\tconst fromInput = (payload instanceof Object && payload.fromInput !== undefined) ? Boolean(payload.fromInput) : false;\r\n\t\t\t\tconst doLog = (payload instanceof Object && payload.log !== undefined) ? Boolean(payload.log) : true;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst response = await connector.sendCode(code);\r\n\t\t\t\t\tif (doLog && (fromInput || response !== '')) {\r\n\t\t\t\t\t\tlogCode(code, response, hostname, fromInput);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn response;\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tif (!(e instanceof DisconnectedError) && doLog) {\r\n\t\t\t\t\t\tconst type = (e instanceof CodeBufferError) ? 'warning' : 'error';\r\n\t\t\t\t\t\tlog(type, code, e.message, hostname);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthrow e;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Upload a file and show progress\r\n\t\t\tasync upload(context, { filename, content, showProgress = true, showSuccess = true, showError = true, num, count }) {\r\n\t\t\t\tconst cancellationToken = {}, startTime = new Date();\r\n\t\t\t\tconst notification = showProgress && makeFileTransferNotification('upload', filename, cancellationToken, num, count);\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Check if config.g needs to be backed up\r\n\t\t\t\t\tconst configFile = Path.combine(context.state.model.directories.system, Path.configFile);\r\n\t\t\t\t\tif (Path.equals(filename, configFile)) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tconst configFileBackup = Path.combine(context.state.model.directories.system, Path.configBackupFile);\r\n\t\t\t\t\t\t\tawait connector.move({ from: configFile, to: configFileBackup, force: true, silent: true });\r\n\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\tconsole.warn(e);\r\n\t\t\t\t\t\t\tlog('error', i18n.t('notification.upload.error', [Path.extractFileName(filename)]), e.message, hostname);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Clear the cached file info and wait for upload to finish\r\n\t\t\t\t\tcontext.commit('cache/clearFileInfo', filename);\r\n\t\t\t\t\tawait connector.upload({ filename, content, cancellationToken, onProgress: notification && notification.onProgress });\r\n\r\n\t\t\t\t\t// Show success message\r\n\t\t\t\t\tif (showSuccess && num === count) {\r\n\t\t\t\t\t\tif (count) {\r\n\t\t\t\t\t\t\tlog('success', i18n.t('notification.upload.successMulti', [count]), undefined, hostname);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconst secondsPassed = Math.round((new Date() - startTime) / 1000);\r\n\t\t\t\t\t\t\tlog('success', i18n.t('notification.upload.success', [Path.extractFileName(filename), displayTime(secondsPassed)]), undefined, hostname);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Hide the notification again\r\n\t\t\t\t\tif (showProgress) {\r\n\t\t\t\t\t\tnotification.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\t// Show and report error message\r\n\t\t\t\t\tif (showProgress) {\r\n\t\t\t\t\t\tnotification.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (showError && !(e instanceof OperationCancelledError)) {\r\n\t\t\t\t\t\tconsole.warn(e);\r\n\t\t\t\t\t\tlog('error', i18n.t('notification.upload.error', [Path.extractFileName(filename)]), e.message, hostname);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthrow e;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Download a file and show progress\r\n\t\t\t// Parameter can be either the filename or an object { filename, (type, showProgress, showSuccess, showError, num, count) }\r\n\t\t\tasync download(context, payload) {\r\n\t\t\t\tconst filename = (payload instanceof Object) ? payload.filename : payload;\r\n\t\t\t\tconst type = (payload instanceof Object && payload.type !== undefined) ? payload.type : 'json';\r\n\t\t\t\tconst showProgress = (payload instanceof Object && payload.showProgress !== undefined) ? Boolean(payload.showProgress) : true;\r\n\t\t\t\tconst showSuccess = (payload instanceof Object && payload.showSuccess !== undefined) ? Boolean(payload.showSuccess) : true;\r\n\t\t\t\tconst showError = (payload instanceof Object && payload.showError !== undefined) ? Boolean(payload.showError) : true;\r\n\t\t\t\tconst num = (payload instanceof Object) ? payload.num : undefined;\r\n\t\t\t\tconst count = (payload instanceof Object) ? payload.count : undefined;\r\n\r\n\t\t\t\tconst cancellationToken = {}, startTime = new Date();\r\n\t\t\t\tconst notification = showProgress && makeFileTransferNotification('download', filename, cancellationToken, num, count);\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Wait for download to finish\r\n\t\t\t\t\tconst response = await connector.download({ filename, type, cancellationToken, onProgress: notification && notification.onProgress });\r\n\r\n\t\t\t\t\t// Show success message\r\n\t\t\t\t\tif (showSuccess && num === count) {\r\n\t\t\t\t\t\tif (count) {\r\n\t\t\t\t\t\t\tlog('success', i18n.t('notification.download.successMulti', [count]), undefined, hostname);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconst secondsPassed = Math.round((new Date() - startTime) / 1000);\r\n\t\t\t\t\t\t\tlog('success', i18n.t('notification.download.success', [Path.extractFileName(filename), displayTime(secondsPassed)]), undefined, hostname);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Hide the notification again and return the downloaded data\r\n\t\t\t\t\tif (showProgress) {\r\n\t\t\t\t\t\tnotification.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn response;\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\t// Show and report error message\r\n\t\t\t\t\tif (showProgress) {\r\n\t\t\t\t\t\tnotification.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (showError && !(e instanceof OperationCancelledError)) {\r\n\t\t\t\t\t\tconsole.warn(e);\r\n\t\t\t\t\t\tlog('error', i18n.t('notification.download.error', [Path.extractFileName(filename)]), e.message, hostname);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthrow e;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Update machine mode. Reserved for the machine connector!\r\n\t\t\tasync update({ state, commit, dispatch }, payload) {\r\n\t\t\t\tconst lastBeepFrequency = state.model.state.beep ? state.model.state.beep.frequency : null;\r\n\t\t\t\tconst lastBeepDuration = state.model.state.beep ? state.model.state.beep.duration : null;\r\n\t\t\t\tconst lastDisplayMessage = state.model.state.displayMessage;\r\n\t\t\t\tconst lastStatus = state.model.state.status;\r\n\r\n\t\t\t\t// Check if the job has finished and if so, clear the file cache\r\n\t\t\t\tif (payload.job && payload.job.lastFileName && payload.job.lastFileName !== state.model.job.lastFileName) {\r\n\t\t\t\t\tcommit('cache/clearFileInfo', payload.job.lastFileName);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Merge updates into the object model\r\n\t\t\t\tcommit('model/update', payload);\r\n\t\t\t\t\r\n\t\t\t\t// Is a new beep requested?\r\n\t\t\t\tif (state.model.state.beep &&\r\n\t\t\t\t\tlastBeepDuration !== state.model.state.beep.duration &&\r\n\t\t\t\t\tlastBeepFrequency !== state.model.state.beep.frequency) {\r\n\t\t\t\t\tbeep(state.model.state.beep.frequency, state.model.state.beep.duration);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Is a new message supposed to be shown?\r\n\t\t\t\tif (state.model.state.displayMessage &&\r\n\t\t\t\t\tstate.model.state.displayMessage != lastDisplayMessage) {\r\n\t\t\t\t\tshowMessage(state.model.state.displayMessage);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Has the firmware halted?\r\n\t\t\t\tif (lastStatus != state.model.state.status && state.model.state.status === StatusType.halted) {\r\n\t\t\t\t\tlog('warning', i18n.t('events.emergencyStop'));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Have we just finished a job? Send M1 if auto-sleep is enabled\r\n\t\t\t\tif (isPrinting(lastStatus) && !isPrinting(state.model.state.status) && state.autoSleep) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tawait dispatch('sendCode', 'M1');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tlogCode('M1', e.message, hostname);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Actions for specific events triggered by the machine connector\r\n\t\t\tasync onConnectionError({ state, commit, dispatch }, error) {\r\n\t\t\t\tif (state.isReconnecting && !(error instanceof InvalidPasswordError)) {\r\n\t\t\t\t\t// Retry after a short moment\r\n\t\t\t\t\tsetTimeout(() => dispatch('reconnect'), 2000);\r\n\t\t\t\t} else if (!state.isReconnecting && (state.model.state.status === StatusType.updating || state.model.state.status === StatusType.halted)) {\r\n\t\t\t\t\t// Try to reconnect after a short period of time\r\n\t\t\t\t\tif (state.model.state.status !== StatusType.updating) {\r\n\t\t\t\t\t\tlog('warning', i18n.t('events.reconnecting'));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcommit('setReconnecting', true);\r\n\t\t\t\t\tsetTimeout(() => dispatch('reconnect'), 2000);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Notify the root store about this event\r\n\t\t\t\t\tawait dispatch('onConnectionError', { hostname, error }, { root: true });\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tonCodeCompleted(context, { code, reply }) {\r\n\t\t\t\tif (code === undefined) {\r\n\t\t\t\t\tlogCode(undefined, reply, hostname);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t/* eslint-disable no-unused-vars */\r\n\t\t\tonDirectoryCreated: (context, directory) => null,\r\n\t\t\tonFileUploaded: (context, { filename, content }) => null,\r\n\t\t\tonFileDownloaded: (context, { filename, content }) => null,\r\n\t\t\tonFileOrDirectoryMoved: (context, { from, to, force }) => null,\r\n\t\t\tonFileOrDirectoryDeleted: (context, filename) => null\r\n\t\t\t/* eslint-enable no-unused-vars */\r\n\t\t},\r\n\t\tmutations: {\r\n\t\t\tclearLog: state => state.events = [],\r\n\t\t\tlog: (state, payload) => state.events.push(payload),\r\n\r\n\t\t\tunregister: () => connector.unregister(),\r\n\r\n\t\t\tsetAutoSleep: (state, value) => state.autoSleep = value,\r\n\t\t\tsetReconnecting: (state, reconnecting) => state.isReconnecting = reconnecting,\r\n\t\t\tsetHighVerbosity() { if (connector) { connector.verbose = true; } },\r\n\t\t\tsetNormalVerbosity() { if (connector) { connector.verbose = false; } }\r\n\t\t},\r\n\t\tmodules: {\r\n\t\t\tcache: cache(hostname),\r\n\t\t\tmodel: model(connector),\r\n\t\t\tsettings: settings(hostname)\r\n\t\t}\r\n\t}\r\n}\r\n"]}]}