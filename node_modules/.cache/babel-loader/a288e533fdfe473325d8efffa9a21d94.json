{"remainingRequest":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\store\\machine\\connector\\RestConnector.js","dependencies":[{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\store\\machine\\connector\\RestConnector.js","mtime":1592248188701},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/jpatrick/Documents/GitHub/DuetWebControl_Fork/src/store/machine/connector/RestConnector.js"],"names":["BaseConnector","ParsedFileInfo","NetworkError","DisconnectedError","TimeoutError","OperationCancelledError","OperationFailedError","DirectoryNotFoundError","FileNotFoundError","LoginError","InvalidPasswordError","strToTime","RestConnector","hostname","username","password","socketProtocol","location","protocol","socket","WebSocket","Promise","resolve","reject","onmessage","e","model","JSON","parse","data","onerror","onclose","code","reason","requestBase","job","layers","method","url","params","responseType","body","onProgress","cancellationToken","filename","internalURL","hadParam","key","encodeURIComponent","xhr","XMLHttpRequest","open","setRequestHeader","onprogress","loaded","total","upload","timeout","cancel","abort","requests","push","that","onload","filter","request","status","responseText","response","statusText","onabort","ontimeout","send","forEach","cancelRequests","lastDsfVersion","state","dsfVersion","reload","startSocket","module","messages","undefined","message","dispatch","reply","content","pingTask","setTimeout","doPing","bind","settings","pingInterval","onMessage","onClose","clearTimeout","type","length","layer","close","trim","payload","Blob","from","to","force","silent","formData","FormData","set","Boolean","directory","Object","map","item","isDirectory","name","size","lastModified","date"],"mappings":"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","sourcesContent":["// RESTful connector for DSF\r\n'use strict'\r\n\r\nimport BaseConnector from './BaseConnector.js'\r\nimport { ParsedFileInfo } from '../modelItems.js'\r\n\r\nimport {\r\n\tNetworkError, DisconnectedError, TimeoutError, OperationCancelledError, OperationFailedError,\r\n\tDirectoryNotFoundError, FileNotFoundError,\r\n\tLoginError, InvalidPasswordError\r\n} from '../../../utils/errors.js'\r\n\r\nimport { strToTime } from '../../../utils/time.js'\r\n\r\nexport default class RestConnector extends BaseConnector {\r\n\tstatic async connect(hostname, username, password) {\r\n\t\tconst socketProtocol = location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n\t\tconst socket = new WebSocket(`${socketProtocol}//${hostname}/machine`);\r\n\t\tconst model = await new Promise(function(resolve, reject) {\r\n\t\t\tsocket.onmessage = function(e) {\r\n\t\t\t\t// Successfully connected, the first message is the full object model\r\n\t\t\t\tconst model = JSON.parse(e.data);\r\n\t\t\t\tresolve(model);\r\n\t\t\t};\r\n\t\t\tsocket.onerror = socket.onclose = function(e) {\r\n\t\t\t\tif (e.code === 1001 || e.code == 1011) {\r\n\t\t\t\t\t// DCS unavailable or incompatible DCS version\r\n\t\t\t\t\treject(new LoginError(e.reason));\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// TODO accomodate InvalidPasswordError and NoFreeSessionError here\r\n\t\t\t\t\treject(new NetworkError(e.reason));\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t});\r\n\t\treturn new RestConnector(hostname, password, socket, model);\r\n\t}\r\n\r\n\tmodel = {}\r\n\tfileTransfers = []\r\n\tlayers = []\r\n\r\n\tconstructor(hostname, password, socket, model) {\r\n\t\tsuper('rest', hostname);\r\n\t\tthis.password = password;\r\n\t\tthis.requestBase = `${location.protocol}//${hostname}/`;\r\n\t\tthis.socket = socket;\r\n\t\tthis.model = model;\r\n\t\tif (model.job && model.job.layers) {\r\n\t\t\tthis.layers = model.job.layers;\r\n\t\t}\r\n\t}\r\n\r\n\trequestBase = ''\r\n\trequests = []\r\n\r\n\trequest(method, url, params = null, responseType = 'json', body = null, onProgress = null, cancellationToken = null, filename = 'n/a') {\r\n\t\tlet internalURL = this.requestBase + url;\r\n\t\tif (params) {\r\n\t\t\tlet hadParam = false;\r\n\t\t\tfor (let key in params) {\r\n\t\t\t\tinternalURL += (hadParam ? '&' : '?') + key + '=' + encodeURIComponent(params[key]);\r\n\t\t\t\thadParam = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst xhr = new XMLHttpRequest();\r\n\t\txhr.open(method, internalURL);\r\n\t\tif (responseType === 'json') {\r\n\t\t\txhr.responseType = 'text';\r\n\t\t\txhr.setRequestHeader('Content-Type', 'application/json');\r\n\t\t} else {\r\n\t\t\txhr.responseType = responseType;\r\n\t\t}\r\n\t\tif (onProgress) {\r\n\t\t\txhr.onprogress = function(e) {\r\n\t\t\t\tif (e.loaded && e.total) {\r\n\t\t\t\t\tonProgress(e.loaded, e.total);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\txhr.upload.onprogress = xhr.onprogress;\r\n\t\t}\r\n\t\txhr.timeout = 0;\r\n\t\tif (cancellationToken) {\r\n\t\t\tcancellationToken.cancel = () => xhr.abort();\r\n\t\t}\r\n\t\tthis.requests.push(xhr);\r\n\r\n\t\tconst that = this;\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\txhr.onload = function() {\r\n\t\t\t\tthat.requests = that.requests.filter(request => request !== xhr);\r\n\t\t\t\tif (xhr.status >= 200 && xhr.status < 300) {\r\n\t\t\t\t\tif (responseType === 'json') {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tif (!xhr.responseText) {\r\n\t\t\t\t\t\t\t\tresolve(null);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tresolve(JSON.parse(xhr.responseText));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresolve(xhr.response);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (xhr.status === 401) {\r\n\t\t\t\t\treject(new InvalidPasswordError());\r\n\t\t\t\t} else if (xhr.status === 404) {\r\n\t\t\t\t\treject(new FileNotFoundError(filename));\r\n\t\t\t\t} else if (xhr.status >= 500) {\r\n\t\t\t\t\treject(new OperationFailedError(xhr.responseText || xhr.statusText));\r\n\t\t\t\t} else if (xhr.status !== 0) {\r\n\t\t\t\t\treject(new OperationFailedError());\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\txhr.onabort = function() {\r\n\t\t\t\tthat.requests = that.requests.filter(request => request !== xhr);\r\n\t\t\t\treject(that.socket ? new OperationCancelledError() : new DisconnectedError());\r\n\t\t\t}\r\n\t\t\txhr.onerror = function() {\r\n\t\t\t\tthat.requests = that.requests.filter(request => request !== xhr);\r\n\t\t\t\treject(new NetworkError());\r\n\t\t\t};\r\n\t\t\txhr.ontimeout = function () {\r\n\t\t\t\treject(new TimeoutError());\r\n\t\t\t};\r\n\t\t\txhr.send(body);\r\n\t\t});\r\n\t}\r\n\r\n\tcancelRequests() {\r\n\t\tthis.requests.forEach(request => request.abort());\r\n\t}\r\n\r\n\tasync reconnect() {\r\n\t\t// Cancel pending requests\r\n\t\tthis.cancelRequests();\r\n\r\n\t\t// Attempt to reconnect\r\n\t\tconst that = this;\r\n\t\tawait new Promise(function(resolve, reject) {\r\n\t\t\tconst lastDsfVersion = that.model.state.dsfVersion;\r\n\t\t\tconst socketProtocol = location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n\t\t\tconst socket = new WebSocket(`${socketProtocol}//${that.hostname}/machine`);\r\n\t\t\tsocket.onmessage = function(e) {\r\n\t\t\t\t// Successfully connected, the first message is the full object model\r\n\t\t\t\tthat.model = JSON.parse(e.data);\r\n\t\t\t\tif (that.model.job && that.model.job.layers) {\r\n\t\t\t\t\tthat.layers = that.model.job.layers;\r\n\t\t\t\t}\r\n\t\t\t\tthat.socket = socket;\r\n\r\n\t\t\t\t// Check if DSF has been updated\r\n\t\t\t\tif (lastDsfVersion !== that.model.state.dsfVersion) {\r\n\t\t\t\t\tlocation.reload(true);\r\n\t\t\t\t}\r\n\t\t\t\tresolve();\r\n\t\t\t}\r\n\t\t\tsocket.onerror = socket.onclose = function(e) {\r\n\t\t\t\tif (e.code === 1001 || e.code == 1011) {\r\n\t\t\t\t\t// DCS unavailable or incompatible DCS version\r\n\t\t\t\t\treject(new LoginError(e.reason));\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// TODO accomodate InvalidPasswordError and NoFreeSessionError here\r\n\t\t\t\t\treject(new NetworkError(e.reason));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Apply new socket and machine model\r\n\t\tawait that.startSocket();\r\n\t}\r\n\r\n\tregister(module) {\r\n\t\tsuper.register(module);\r\n\t\tthis.startSocket();\r\n\t}\r\n\r\n\tasync startSocket() {\r\n\t\t// Deal with generic messages\r\n\t\tif (this.model.messages !== undefined) {\r\n\t\t\tthis.model.messages.forEach(async function(message) {\r\n\t\t\t\tawait this.dispatch('onCodeCompleted', { code: undefined, reply: message.content });\r\n\t\t\t}, this);\r\n\t\t\tdelete this.model.messages;\r\n\t\t}\r\n\r\n\t\t// Send PING in predefined intervals to detect disconnects from the client side\r\n\t\tthis.pingTask = setTimeout(this.doPing.bind(this), this.settings.pingInterval);\r\n\r\n\t\t// Set up socket events\r\n\t\tthis.socket.onmessage = this.onMessage.bind(this);\r\n\t\tthis.socket.onerror = this.onClose.bind(this);\r\n\t\tthis.socket.onclose = this.onClose.bind(this);\r\n\r\n\t\t// Update model and acknowledge receival\r\n\t\tawait this.dispatch('update', this.model);\r\n\t\tthis.socket.send('OK\\n');\r\n\t}\r\n\r\n\tdoPing() {\r\n\t\t// Although the WebSocket standard is supposed to provide PING frames,\r\n\t\t// there is no way to send them since a WebSocket instance does not provide a method for that.\r\n\t\t// Hence we rely on our own optional PING-PONG implementation\r\n\t\tthis.socket.send('PING\\n');\r\n\t\tthis.pingTask = undefined;\r\n\t}\r\n\r\n\tasync onMessage(e) {\r\n\t\t// Don't do anything if the connection has been terminated...\r\n\t\tif (this.socket == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Use PING/PONG messages to detect connection interrupts\r\n\t\tif (this.pingTask) {\r\n\t\t\t// We've just received something, reset the ping task\r\n\t\t\tclearTimeout(this.pingTask);\r\n\t\t}\r\n\t\tthis.pingTask = setTimeout(this.doPing.bind(this), this.settings.pingInterval);\r\n\r\n\t\t// It's just a PONG reply, ignore this\r\n\t\tif (e.data === 'PONG\\n') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Process model updates\r\n\t\tconst data = JSON.parse(e.data);\r\n\r\n\t\t// Deal with generic messages\r\n\t\tif (data.messages) {\r\n\t\t\tdata.messages.forEach(async function(message) {\r\n\t\t\t\tlet reply;\r\n\t\t\t\tswitch (message.type) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\treply  = `Warning: ${message.content}`;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\treply  = `Error: ${message.content}`;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treply = message.content;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// TODO Pass supplied date/time from the messages here\r\n\t\t\t\tawait this.dispatch('onCodeCompleted', { code: undefined, reply });\r\n\t\t\t}, this);\r\n\t\t\tdelete data.messages;\r\n\t\t}\r\n\r\n\t\t// Deal with layers\r\n\t\tif (data.job && data.job.layers !== undefined) {\r\n\t\t\tif (data.job.layers.length === 0) {\r\n\t\t\t\tthis.layers = [];\r\n\t\t\t} else {\r\n\t\t\t\tdata.job.layers.forEach(layer => this.layers.push(layer), this);\r\n\t\t\t}\r\n\t\t\tdata.job.layers = this.layers;\r\n\t\t}\r\n\r\n\t\t// Update model and acknowledge receipt\r\n\t\tawait this.dispatch('update', data);\r\n\t\tthis.socket.send('OK\\n');\r\n\t}\r\n\r\n\tonClose(e) {\r\n\t\tthis.cancelRequests();\r\n\t\tif (this.pingTask) {\r\n\t\t\tclearTimeout(this.pingTask);\r\n\t\t\tthis.pingTask = undefined;\r\n\t\t}\r\n\t\tthis.dispatch('onConnectionError', new NetworkError(e.reason));\r\n\t}\r\n\r\n\tasync disconnect() {\r\n\t\tif (this.socket) {\r\n\t\t\tif (this.pingTask) {\r\n\t\t\t\tclearTimeout(this.pingTask);\r\n\t\t\t\tthis.pingTask = undefined;\r\n\t\t\t}\r\n\r\n\t\t\tthis.socket.close();\r\n\t\t\tthis.socket = null;\r\n\t\t}\r\n\t}\r\n\r\n\tunregister() {\r\n\t\tthis.cancelRequests();\r\n\t\tsuper.unregister();\r\n\t}\r\n\r\n\tasync sendCode(code) {\r\n\t\tlet reply;\r\n\t\ttry {\r\n\t\t\tconst response = await this.request('POST', 'machine/code', null, 'text', code);\r\n\t\t\treply = response.trim();\r\n\t\t} catch (e) {\r\n\t\t\treply = 'Error: ' + e.message;\r\n\t\t}\r\n\r\n\t\tthis.dispatch('onCodeCompleted', { code, reply });\r\n\t\treturn reply;\r\n\t}\r\n\r\n\tasync upload({ filename, content, cancellationToken = null, onProgress }) {\r\n\t\t// Perform actual upload in the background\r\n\t\tconst payload = (content instanceof(Blob)) ? content : new Blob([content]);\r\n\t\tawait this.request('PUT', 'machine/file/' + encodeURIComponent(filename), null, '', payload, onProgress, cancellationToken, filename);\r\n\r\n\t\t// Upload successful\r\n\t\tthis.dispatch('onFileUploaded', { filename, content });\r\n\t}\r\n\r\n\tasync delete(filename) {\r\n\t\tawait this.request('DELETE', 'machine/file/' + encodeURIComponent(filename), null, 'json', null, null, null, filename);\r\n\t\tawait this.dispatch('onFileOrDirectoryDeleted', filename);\r\n\t}\r\n\r\n\tasync move({ from, to, force = false, silent = false }) {\r\n\t\tconst formData = new FormData();\r\n\t\tformData.set('from', from);\r\n\t\tformData.set('to', to);\r\n\t\tformData.set('force', Boolean(force));\r\n\t\t\r\n\t\ttry {\r\n\t\t\tawait this.request('POST', 'machine/file/move', null, '', formData, null, null, from);\r\n\t\t\tawait this.dispatch('onFileOrDirectoryMoved', { from, to, force });\r\n\t\t} catch (e) {\r\n\t\t\tif (!silent) {\r\n\t\t\t\tthrow e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync makeDirectory(directory) {\r\n\t\tawait this.request('PUT', 'machine/directory/' + encodeURIComponent(directory));\r\n\t\tawait this.dispatch('onDirectoryCreated', directory);\r\n\t}\r\n\r\n\tasync download(payload) {\r\n\t\tconst filename = (payload instanceof Object) ? payload.filename : payload;\r\n\t\tconst type = (payload instanceof Object && payload.type !== undefined) ? payload.type : 'json';\r\n\t\tconst onProgress = (payload instanceof Object) ? payload.onProgress : undefined;\r\n\t\tconst cancellationToken = (payload instanceof Object && payload.cancellationToken) ? payload.cancellationToken : null;\r\n\r\n\t\tconst response = await this.request('GET', 'machine/file/' + encodeURIComponent(filename), null, type, null, onProgress, cancellationToken, filename);\r\n\r\n\t\tthis.dispatch('onFileDownloaded', { filename, content: response });\r\n\t\treturn response;\r\n\t}\r\n\r\n\tasync getFileList(directory) {\r\n\t\ttry {\r\n\t\t\tconst response = await this.request('GET', 'machine/directory/' + encodeURIComponent(directory));\r\n\t\t\treturn response.map(item => ({\r\n\t\t\t\tisDirectory: item.type === 'd',\r\n\t\t\t\tname: item.name,\r\n\t\t\t\tsize: (item.type === 'd') ? null : item.size,\r\n\t\t\t\tlastModified: strToTime(item.date)\r\n\t\t\t}));\r\n\t\t} catch (e) {\r\n\t\t\tif (e instanceof FileNotFoundError) {\r\n\t\t\t\tthrow new DirectoryNotFoundError(directory);\r\n\t\t\t}\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\r\n\tasync getFileInfo(filename) {\r\n\t\tconst response = await this.request('GET', 'machine/fileinfo/' + encodeURIComponent(filename), null, 'json', null, null, null, filename);\r\n\t\treturn new ParsedFileInfo(response);\r\n\t}\r\n}\r\n"]}]}