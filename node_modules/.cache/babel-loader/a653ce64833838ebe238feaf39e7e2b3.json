{"remainingRequest":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\store\\machine\\connector\\PollConnector.js","dependencies":[{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\store\\machine\\connector\\PollConnector.js","mtime":1592248188689},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/jpatrick/Documents/GitHub/DuetWebControl_Fork/src/store/machine/connector/PollConnector.js"],"names":["crc32","BaseConnector","defaultRequestTimeout","getBoardDefinition","DefaultMachineModel","HeaterState","StatusType","isPaused","isPrinting","BeepRequest","MessageBox","ParsedFileInfo","NetworkError","DisconnectedError","TimeoutError","OperationCancelledError","OperationFailedError","DirectoryNotFoundError","FileNotFoundError","DriveUnmountedError","LoginError","InvalidPasswordError","NoFreeSessionError","CodeResponseError","CodeBufferError","arraySizesDiffer","quickPatch","bitmapToArray","strToTime","timeToStr","PollConnector","method","url","params","responseType","body","onProgress","timeout","requestTimeout","cancellationToken","filename","retry","internalURL","requestBase","hadParam","key","encodeURIComponent","xhr","XMLHttpRequest","open","setRequestHeader","onprogress","e","loaded","total","upload","cancel","abort","requests","push","maxRetries","settings","ajaxRetries","that","Promise","resolve","reject","onload","filter","request","status","responseText","JSON","parse","response","location","protocol","hostname","password","time","Date","then","result","Object","err","catch","error","lastSeq","getGCodeReply","setTimeout","statusText","onabort","updateLoopTimer","onerror","ontimeout","send","pendingCodes","forEach","code","username","window","forceLegacyConnect","apiLevel","setConnectingProgress","responseData","boardType","sessionTimeout","module","scheduleUpdate","cancelRequests","lastStatusResponse","lastSeqs","lastUptime","justConnected","clearTimeout","requestExtendedStatus","updateLoopCounter","extendedUpdateEvery","verbose","wasPrinting","indexOf","wasSimulating","wasPaused","statusType","type","newData","updateLoopStatus","getFileInfo","currentFileInfo","printDuration","job","file","layers","printStats","layerHeight","lastFileName","fileName","lastFileCancelled","lastFileSimulated","fanRPMs","sensors","fanRPM","Array","fans","fanPercent","map","index","rpm","length","value","heat","heaters","temps","state","sensor","convertHeaterState","move","axes","coords","xyz","position","drive","drives","homed","Boolean","axesHomed","machinePosition","userPosition","currentMove","requestedSpeed","speeds","undefined","requested","topSpeed","top","extruders","extr","extruder","factor","extrFactors","speedFactor","workspaceNumber","wpl","scanner","progress","analog","current","lastReading","number","concat","extra","temp","name","probes","probeType","probeValue","probeSecondary","atxPower","currentTool","convertStatusLetter","tools","active","standby","babystep","machine","axis","bed","heater","chamber","cabinet","numExtruders","axisNames","split","boardDefinition","probe","boards","firmwareFileName","firmwareName","iapFileNameSD","maxHeaters","maxMotors","mcuTemp","mcutemp","min","cur","max","shortName","supports12864","v12","vIn","vin","fanData","fanNames","thermostatic","controllableFans","bedHeaters","chamberHeaters","coldExtrudeTemperature","coldExtrudeTemp","coldRetractTemperature","coldRetractTemp","letter","visible","compensation","kinematics","geometry","network","endstops","dummy","triggered","threshold","triggerHeight","height","machineMode","mode","tool","axisMap","filamentExtruder","offsets","tempLimit","filament","names","volumes","i","mounted","mountedVolumes","filePosition","extrRaw","rawPosition","duration","layer","currentLayer","layerTime","currentLayerTime","warmUpDuration","timesLeft","addLayers","firstLayerDuration","firstLayerHeight","amount","fractionPrinted","measuredLayerHeight","zPosition","layerJustChanged","avgDuration","beepFrequency","beepDuration","displayMessage","messageBox","output","message","msgBox","title","msg","axisControls","controls","beep","frequency","spindles","spindle","off","dispatch","seq","getConfigResponse","keys","configData","firmwareElectronics","firmwareDate","firmwareVersion","directories","sysdir","system","axisMins","acceleration","accelerations","currents","jerk","minFeedrates","axisMaxes","speed","maxFeedrates","idle","idleCurrentFactor","idleTimeout","interfaces","dwsVersion","jobKey","reply","console","warn","keyIndex","numKeys","flags","keyResponse","upTime","seqs","lastStatus","simulating","layersChanged","size","updateLoopModel","doUpdate","bind","updateInterval","gcode","stringify","buff","inBraces","trim","content","payload","Blob","lastModified","crcUploads","fileReader","FileReader","target","readAsArrayBuffer","checksum","toString","from","to","force","silent","old","new","deleteexisting","directory","dir","fileList","next","first","files","item","isDirectory","date"],"mappings":"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","sourcesContent":["// Polling connector for RepRapFirmware\r\n'use strict'\r\n\r\nimport crc32 from 'turbo-crc32/crc32'\r\n\r\nimport BaseConnector, { defaultRequestTimeout } from './BaseConnector.js'\r\nimport { getBoardDefinition } from '../boards.js'\r\nimport { DefaultMachineModel } from '../model.js'\r\nimport { HeaterState, StatusType, isPaused, isPrinting } from '../modelEnums.js'\r\nimport { BeepRequest, MessageBox, ParsedFileInfo } from '../modelItems.js'\r\n\r\nimport {\r\n\tNetworkError, DisconnectedError, TimeoutError, OperationCancelledError, OperationFailedError,\r\n\tDirectoryNotFoundError, FileNotFoundError, DriveUnmountedError,\r\n\tLoginError, InvalidPasswordError, NoFreeSessionError,\r\n\tCodeResponseError, CodeBufferError\r\n} from '../../../utils/errors.js'\r\nimport { arraySizesDiffer, quickPatch } from '../../../utils/patch.js'\r\nimport { bitmapToArray } from '../../../utils/numbers.js'\r\nimport { strToTime, timeToStr } from '../../../utils/time.js'\r\n\r\nexport default class PollConnector extends BaseConnector {\r\n\tstatic async connect(hostname, username, password) {\r\n\t\tconst response = await BaseConnector.request('GET', `${location.protocol}//${hostname}/rr_connect`, {\r\n\t\t\tpassword,\r\n\t\t\ttime: timeToStr(new Date())\r\n\t\t});\r\n\r\n\t\tswitch (response.err) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (!window.forceLegacyConnect && response.apiLevel > 0) {\r\n\t\t\t\t\t// Don't hide the connection dialog while the full model is being loaded...\r\n\t\t\t\t\tBaseConnector.setConnectingProgress(0);\r\n\t\t\t\t}\r\n\t\t\t\treturn new PollConnector(hostname, password, response);\r\n\t\t\tcase 1: throw new InvalidPasswordError();\r\n\t\t\tcase 2: throw new NoFreeSessionError();\r\n\t\t\tdefault: throw new LoginError(`Unknown err value: ${response.err}`)\r\n\t\t}\r\n\t}\r\n\r\n\tsessionTimeout = 8000\t\t// ms\r\n\tjustConnected = true\r\n\tname = null\r\n\tpassword = null\r\n\tboardType = null\r\n\tapiLevel = 0\r\n\r\n\trequestBase = ''\r\n\trequestTimeout = defaultRequestTimeout\r\n\trequests = []\r\n\r\n\trequest(method, url, params = null, responseType = 'json', body = null, onProgress = null, timeout = this.requestTimeout, cancellationToken = null, filename = 'n/a', retry = 0) {\r\n\t\tlet internalURL = this.requestBase + url;\r\n\t\tif (params) {\r\n\t\t\tlet hadParam = false;\r\n\t\t\tfor (let key in params) {\r\n\t\t\t\tinternalURL += (hadParam ? '&' : '?') + key + '=' + encodeURIComponent(params[key]);\r\n\t\t\t\thadParam = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst xhr = new XMLHttpRequest();\r\n\t\txhr.open(method, internalURL);\r\n\t\tif (responseType === 'json') {\r\n\t\t\txhr.responseType = 'text';\r\n\t\t\txhr.setRequestHeader('Content-Type', 'application/json');\r\n\t\t} else {\r\n\t\t\txhr.responseType = responseType;\r\n\t\t}\r\n\t\tif (onProgress) {\r\n\t\t\txhr.onprogress = function(e) {\r\n\t\t\t\tif (e.loaded && e.total) {\r\n\t\t\t\t\tonProgress(e.loaded, e.total);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\txhr.upload.onprogress = xhr.onprogress;\r\n\t\t}\r\n\t\txhr.timeout = timeout;\r\n\t\tif (cancellationToken) {\r\n\t\t\tcancellationToken.cancel = () => xhr.abort();\r\n\t\t}\r\n\t\tthis.requests.push(xhr);\r\n\r\n\t\tconst maxRetries = this.settings.ajaxRetries, that = this;\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\txhr.onload = function() {\r\n\t\t\t\tthat.requests = that.requests.filter(request => request !== xhr);\r\n\t\t\t\tif (xhr.status >= 200 && xhr.status < 300) {\r\n\t\t\t\t\tif (responseType === 'json') {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tif (!xhr.responseText) {\r\n\t\t\t\t\t\t\t\tresolve(null);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tresolve(JSON.parse(xhr.responseText));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresolve(xhr.response);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (xhr.status === 401) {\r\n\t\t\t\t\t// User might have closed another tab or the firmware restarted, which can cause\r\n\t\t\t\t\t// the current session to be terminated. Try to send another rr_connect request\r\n\t\t\t\t\t// with the last-known password and retry the pending request if that succeeds\r\n\t\t\t\t\tBaseConnector.request('GET', `${location.protocol}//${that.hostname}/rr_connect`, {\r\n\t\t\t\t\t\t\tpassword: that.password,\r\n\t\t\t\t\t\t\ttime: timeToStr(new Date())\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.then(function(result) {\r\n\t\t\t\t\t\t\tif (result instanceof Object && result.err === 0) {\r\n\t\t\t\t\t\t\t\tthat.request(method, url, params, responseType, body, onProgress, timeout, cancellationToken, filename)\r\n\t\t\t\t\t\t\t\t\t.then(result => resolve(result))\r\n\t\t\t\t\t\t\t\t\t.catch(error => reject(error));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treject(new InvalidPasswordError());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(error => reject(error));\r\n\t\t\t\t} else if (xhr.status === 404) {\r\n\t\t\t\t\treject(new FileNotFoundError(filename));\r\n\t\t\t\t} else if (xhr.status === 503) {\r\n\t\t\t\t\tif (retry < maxRetries) {\r\n\t\t\t\t\t\t// RRF may have run out of output buffers. We usually get here when a code reply is blocking\r\n\t\t\t\t\t\tif (retry === 0) {\r\n\t\t\t\t\t\t\tthat.lastSeq++;\r\n\t\t\t\t\t\t\tthat.getGCodeReply(that.lastSeq)\r\n\t\t\t\t\t\t\t\t.then(function() {\r\n\t\t\t\t\t\t\t\t\t// Retry the original request when the code reply has been received\r\n\t\t\t\t\t\t\t\t\tthat.request(method, url, params, responseType, body, onProgress, timeout, cancellationToken, filename, retry + 1)\r\n\t\t\t\t\t\t\t\t\t\t.then(result => resolve(result))\r\n\t\t\t\t\t\t\t\t\t\t.catch(error => reject(error));\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.catch(error => reject(error));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Retry the original request after a while\r\n\t\t\t\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\t\t\t\tthat.request(method, url, params, responseType, body, onProgress, timeout, cancellationToken, filename, retry + 1)\r\n\t\t\t\t\t\t\t\t\t.then(result => resolve(result))\r\n\t\t\t\t\t\t\t\t\t.catch(error => reject(error));\r\n\t\t\t\t\t\t\t}, 2000);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treject(new OperationFailedError(xhr.responseText || xhr.statusText));\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (xhr.status >= 500) {\r\n\t\t\t\t\treject(new OperationFailedError(xhr.responseText || xhr.statusText));\r\n\t\t\t\t} else if (xhr.status !== 0) {\r\n\t\t\t\t\treject(new OperationFailedError());\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\txhr.onabort = function() {\r\n\t\t\t\tthat.requests = that.requests.filter(request => request !== xhr);\r\n\t\t\t\treject(that.updateLoopTimer ? new OperationCancelledError() : new DisconnectedError());\r\n\t\t\t}\r\n\t\t\txhr.onerror = function() {\r\n\t\t\t\tthat.requests = that.requests.filter(request => request !== xhr);\r\n\t\t\t\tif (retry < maxRetries) {\r\n\t\t\t\t\t// Unreliable connection, retry if possible\r\n\t\t\t\t\tthat.request(method, url, params, responseType, body, onProgress, timeout, cancellationToken, filename, retry + 1)\r\n\t\t\t\t\t\t.then(result => resolve(result))\r\n\t\t\t\t\t\t.catch(error => reject(error));\r\n\t\t\t\t} else {\r\n\t\t\t\t\treject(new NetworkError());\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\txhr.ontimeout = function () {\r\n\t\t\t\tthat.requests = that.requests.filter(request => request !== xhr);\r\n\t\t\t\tif (retry < maxRetries) {\r\n\t\t\t\t\t// Request has timed out, retry if possible\r\n\t\t\t\t\tthat.request(method, url, params, responseType, body, onProgress, timeout, cancellationToken, filename, retry + 1)\r\n\t\t\t\t\t\t.then(result => resolve(result))\r\n\t\t\t\t\t\t.catch(error => reject(error));\r\n\t\t\t\t} else {\r\n\t\t\t\t\treject(new TimeoutError());\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\txhr.send(body);\r\n\t\t});\r\n\t}\r\n\r\n\tcancelRequests() {\r\n\t\tthis.pendingCodes.forEach(code => code.reject(new DisconnectedError()));\r\n\t\tthis.pendingCodes = [];\r\n\t\tthis.requests.forEach(request => request.abort());\r\n\t\tthis.requests = [];\r\n\t}\r\n\r\n\tconstructor(hostname, password, responseData) {\r\n\t\tsuper('poll', hostname);\r\n\t\tthis.password = password;\r\n\t\tthis.boardType = responseData.boardType;\r\n\t\tthis.requestBase = `${location.protocol}//${hostname}/`;\r\n\t\tthis.sessionTimeout = responseData.sessionTimeout;\r\n\t\tthis.apiLevel = responseData.apiLevel || 0;\r\n\t}\r\n\r\n\tregister(module) {\r\n\t\tsuper.register(module);\r\n\t\tthis.requestTimeout = this.sessionTimeout / (this.settings.ajaxRetries + 1)\r\n\r\n\t\t// Ideally we should be using a ServiceWorker here which would allow us to send push\r\n\t\t// notifications even while DWC2 is running in the background. However, we cannot do\r\n\t\t// this because ServiceWorkers require secured HTTP connections, which are no option\r\n\t\t// for standard end-users. That is also the reason why they are disabled in the build\r\n\t\t// script, which by default is used for improved caching\r\n\t\tthis.scheduleUpdate();\r\n\t}\r\n\r\n\tasync reconnect() {\r\n\t\t// Cancel pending requests and reset the last 'seq' field\r\n\t\t// so that the last G-code reply is queried again\r\n\t\tthis.cancelRequests();\r\n\t\tthis.lastStatusResponse = {};\r\n\t\tthis.lastSeq = 0;\r\n\t\tthis.lastSeqs = {}\r\n\t\tthis.lastUptime = 0\r\n\r\n\t\t// Attempt to reconnect\r\n\t\tconst response = await BaseConnector.request('GET', `${location.protocol}//${this.hostname}/rr_connect`, {\r\n\t\t\tpassword: this.password,\r\n\t\t\ttime: timeToStr(new Date())\r\n\t\t});\r\n\r\n\t\tswitch (response.err) {\r\n\t\t\tcase 0:\r\n\t\t\t\tthis.justConnected = true;\r\n\t\t\t\tthis.boardType = response.boardType;\r\n\t\t\t\tthis.sessionTimeout = response.sessionTimeout;\r\n\t\t\t\tthis.requestTimeout = response.sessionTimeout / (this.settings.ajaxRetries + 1);\r\n\t\t\t\tthis.apiLevel = response.apiLevel || 0;\r\n\t\t\t\tthis.scheduleUpdate();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\t// Bad password\r\n\t\t\t\tthrow new InvalidPasswordError();\r\n\t\t\tcase 2:\r\n\t\t\t\t// No free session available\r\n\t\t\t\tthrow new NoFreeSessionError();\r\n\t\t\tdefault:\r\n\t\t\t\t// Generic login error\r\n\t\t\t\tthrow new LoginError(`Unknown err value: ${response.err}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync disconnect() {\r\n\t\tawait this.request('GET', 'rr_disconnect');\r\n\t}\r\n\r\n\tunregister() {\r\n\t\tthis.cancelRequests();\r\n\t\tif (this.updateLoopTimer) {\r\n\t\t\tclearTimeout(this.updateLoopTimer);\r\n\t\t\tthis.updateLoopTimer = null;\r\n\t\t}\r\n\t\tsuper.unregister();\r\n\t}\r\n\r\n\tupdateLoopTimer = null\r\n\tupdateLoopCounter = 1\r\n\tlastStatusResponse = {}\r\n\tlastSeq = 0\r\n\r\n\tpendingCodes = []\r\n\tlayers = []\r\n\tcurrentFileInfo = new ParsedFileInfo()\r\n\tprintStats = {}\r\n\tprobeType = 0\r\n\tnumExtruders = 0\r\n\r\n\tasync updateLoopStatus(requestExtendedStatus = false) {\r\n\t\trequestExtendedStatus |= this.justConnected ||\r\n\t\t\t(this.updateLoopCounter % this.settings.extendedUpdateEvery) === 0 ||\r\n\t\t\t(this.verbose && (this.updateLoopCounter % 2) === 0);\r\n\r\n\t\t// Decide which type of status update to poll and request it\r\n\t\tconst wasPrinting = ['D', 'S', 'R', 'P', 'M'].indexOf(this.lastStatusResponse.status) !== -1;\r\n\t\tconst wasSimulating = this.lastStatusResponse.status === 'M', wasPaused = this.lastStatusResponse.status === 'P';\r\n\t\tconst statusType = requestExtendedStatus ? 2 : (wasPrinting ? 3 : 1);\r\n\t\tconst response = await this.request('GET', 'rr_status', { type: statusType });\r\n\t\tconst isPrinting = ['D', 'S', 'R', 'P', 'M'].indexOf(response.status) !== -1;\r\n\t\tconst newData = {};\r\n\r\n\t\t// Check if an extended status response needs to be polled in case machine parameters have changed\r\n\t\tif (!requestExtendedStatus && arraySizesDiffer(response, this.lastStatusResponse)) {\r\n\t\t\tawait this.updateLoopStatus(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Retrieve job file information if a print has started or set info about the last job if it has finished\r\n\t\tif (isPrinting) {\r\n\t\t\tif (this.justConnected || !wasPrinting) {\r\n\t\t\t\tthis.currentFileInfo = await this.getFileInfo();\r\n\t\t\t\tdelete this.currentFileInfo.printDuration;\r\n\r\n\t\t\t\tquickPatch(newData, {\r\n\t\t\t\t\tjob: {\r\n\t\t\t\t\t\tfile: this.currentFileInfo,\r\n\t\t\t\t\t\tlayers: []\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.layers = [];\r\n\t\t\t\tthis.printStats = {\r\n\t\t\t\t\tlayerHeight: this.currentFileInfo.layerHeight\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t} else if (wasPrinting) {\r\n\t\t\tquickPatch(newData, {\r\n\t\t\t\tjob: {\r\n\t\t\t\t\tlastFileName: this.currentFileInfo.fileName,\r\n\t\t\t\t\tlastFileCancelled: wasPaused,\r\n\t\t\t\t\tlastFileSimulated: wasSimulating\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Standard Status Response\r\n\t\tconst fanRPMs = (response.sensors.fanRPM instanceof Array) ? response.sensors.fanRPM : [response.sensors.fanRPM];\r\n\t\tquickPatch(newData, {\r\n\t\t\tfans: response.params.fanPercent.map((fanPercent, index) => ({\r\n\t\t\t\trpm: (index < fanRPMs.length) ? fanRPMs[index] : -1,\r\n\t\t\t\tvalue: fanPercent / 100\r\n\t\t\t})),\r\n\t\t\theat: {\r\n\t\t\t\theaters: response.temps.state.map((state, sensor) => ({ state: this.convertHeaterState(state), sensor }), this)\r\n\t\t\t},\r\n\t\t\tmove: {\r\n\t\t\t\taxes: response.coords.xyz.map((position, drive) => ({\r\n\t\t\t\t\tdrives: [drive],\r\n\t\t\t\t\thomed: Boolean(response.coords.axesHomed[drive]),\r\n\t\t\t\t\tmachinePosition: (position === 9999) ? null : position,\r\n\t\t\t\t\tuserPosition: (position === 9999) ? null : position\r\n\t\t\t\t})),\r\n\t\t\t\tcurrentMove: {\r\n\t\t\t\t\trequestedSpeed: (response.speeds !== undefined) ? response.speeds.requested : null,\r\n\t\t\t\t\ttopSpeed: (response.speeds !== undefined) ? response.speeds.top : null\r\n\t\t\t\t},\r\n\t\t\t\textruders: response.coords.extr.map((position, extruder) => ({\r\n\t\t\t\t\tdrives: [response.coords.xyz.length + extruder],\r\n\t\t\t\t\tfactor: response.params.extrFactors[extruder] / 100,\r\n\t\t\t\t\tposition: position\r\n\t\t\t\t})),\r\n\t\t\t\tspeedFactor: response.params.speedFactor / 100,\r\n\t\t\t\tworkspaceNumber: (response.wpl !== undefined) ? response.wpl : 1\r\n\t\t\t},\r\n\t\t\tscanner: (response.scanner) ? {\r\n\t\t\t\tprogress: response.scanner.progress,\r\n\t\t\t\tstatus: response.scanner.status\r\n\t\t\t} : {},\r\n\t\t\tsensors: {\r\n\t\t\t\tanalog: response.temps.current.map((lastReading, number) => ({ lastReading, number }))\r\n\t\t\t\t\t\t.concat(response.temps.extra.map(extra => ({\r\n\t\t\t\t\t\t\tlastReading: (extra.temp === 9999) ? null : extra.temp,\r\n\t\t\t\t\t\t\tname: extra.name\r\n\t\t\t\t\t\t}))),\r\n\t\t\t\tprobes: (this.probeType !== 0) ? [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue: [response.sensors.probeValue].concat(response.sensors.probeSecondary ? response.sensors.probeSecondary : [])\r\n\t\t\t\t\t}\r\n\t\t\t\t] : []\r\n\t\t\t},\r\n\t\t\tstate: {\r\n\t\t\t\tatxPower: (response.params.atxPower === -1) ? null : Boolean(response.params.atxPower),\r\n\t\t\t\tcurrentTool: response.currentTool,\r\n\t\t\t\tstatus: this.convertStatusLetter(response.status)\r\n\t\t\t},\r\n\t\t\ttools: response.temps.tools.active.map((active, index) => ({\r\n\t\t\t\tactive,\r\n\t\t\t\tstandby: response.temps.tools.standby[index]\r\n\t\t\t}))\r\n\t\t});\r\n\t\tif (newData.move.axes.length >= 3) {\r\n\t\t\tnewData.move.axes[2].babystep = (response.params.babystep !== undefined) ? response.params.babystep : 0;\r\n\t\t}\r\n\t\tif (response.coords.machine) {\r\n\t\t\tresponse.coords.machine.forEach(function(machinePosition, axis) {\r\n\t\t\t\tnewData.move.axes[axis].machinePosition = (machinePosition === 9999) ? null : machinePosition;\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (response.temps.bed && response.temps.bed.heater >= 0 && response.temps.bed.heater < newData.sensors.analog.length) {\r\n\t\t\tnewData.heat.heaters[response.temps.bed.heater].active = response.temps.bed.active;\r\n\t\t\tnewData.heat.heaters[response.temps.bed.heater].standby = response.temps.bed.standby;\r\n\t\t}\r\n\t\tif (response.temps.chamber && response.temps.chamber.heater >= 0 && response.temps.chamber.heater < newData.sensors.analog.length) {\r\n\t\t\tnewData.heat.heaters[response.temps.chamber.heater].active = response.temps.chamber.active;\r\n\t\t\tnewData.heat.heaters[response.temps.chamber.heater].standby = response.temps.chamber.standby;\r\n\t\t}\r\n\t\tif (response.temps.cabinet && response.temps.cabinet.heater >= 0 && response.temps.cabinet.heater < newData.sensors.analog.length) {\r\n\t\t\tnewData.heat.heaters[response.temps.cabinet.heater].active = response.temps.cabinet.active;\r\n\t\t\tnewData.heat.heaters[response.temps.cabinet.heater].standby = response.temps.cabinet.standby;\r\n\t\t}\r\n\t\tthis.numExtruders = response.coords.extr.length;\r\n\r\n\t\tif (statusType === 2) {\r\n\t\t\t// Extended Status Response\r\n\t\t\tconst axisNames = (response.axisNames !== undefined) ? response.axisNames.split('') : ['X', 'Y', 'Z', 'U', 'V', 'W', 'A', 'B', 'C'];\r\n\t\t\tconst boardDefinition = getBoardDefinition(this.boardType);\r\n\t\t\tthis.name = name;\r\n\t\t\tthis.probeType = response.probe ? response.probe.type : 0;\r\n\r\n\t\t\tquickPatch(newData, {\r\n\t\t\t\tboards: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirmwareFileName: boardDefinition.firmwareFileName,\r\n\t\t\t\t\t\tfirmwareName: response.firmwareName,\r\n\t\t\t\t\t\tiapFileNameSD: boardDefinition.iapFileNameSD,\r\n\t\t\t\t\t\tmaxHeaters: boardDefinition.maxHeaters,\r\n\t\t\t\t\t\tmaxMotors: boardDefinition.maxMotors,\r\n\t\t\t\t\t\tmcuTemp: response.mcutemp ? {\r\n\t\t\t\t\t\t\tmin: response.mcutemp.min,\r\n\t\t\t\t\t\t\tcurrent: response.mcutemp.cur,\r\n\t\t\t\t\t\t\tmax: response.mcutemp.max\r\n\t\t\t\t\t\t} : {},\r\n\t\t\t\t\t\tshortName: this.boardType,\r\n\t\t\t\t\t\tsupports12864: boardDefinition.supports12864,\r\n\t\t\t\t\t\tv12: response.v12 ? {\r\n\t\t\t\t\t\t\tmin: response.v12.min,\r\n\t\t\t\t\t\t\tcurrent: response.v12.cur,\r\n\t\t\t\t\t\t\tmax: response.v12.max\r\n\t\t\t\t\t\t} : {},\r\n\t\t\t\t\t\tvIn: response.vin ? {\r\n\t\t\t\t\t\t\tmin: response.vin.min,\r\n\t\t\t\t\t\t\tcurrent: response.vin.cur,\r\n\t\t\t\t\t\t\tmax: response.vin.max\r\n\t\t\t\t\t\t} : {}\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\tfans: newData.fans.map((fanData, index) => ({\r\n\t\t\t\t\tname: !response.params.fanNames ? null : response.params.fanNames[index],\r\n\t\t\t\t\tthermostatic: {\r\n\t\t\t\t\t\theaters: ((response.controllableFans & (1 << index)) !== 0) ? [] : [-1]\r\n\t\t\t\t\t}\r\n\t\t\t\t})),\r\n\t\t\t\theat: {\r\n\t\t\t\t\tbedHeaters: response.temps.bed ? [response.temps.bed.heater] : [],\r\n\t\t\t\t\tchamberHeaters: (response.temps.chamber ? [response.temps.chamber.heater] : [])\r\n\t\t\t\t\t\t\t\t\t.concat(response.temps.cabinet ? [response.temps.cabinet.heater] : []),\r\n\t\t\t\t\tcoldExtrudeTemperature: response.coldExtrudeTemp,\r\n\t\t\t\t\tcoldRetractTemperature: response.coldRetractTemp\r\n\t\t\t\t},\r\n\t\t\t\tmove: {\r\n\t\t\t\t\taxes: response.coords.xyz.map((position, index) => ({\r\n\t\t\t\t\t\tletter: axisNames[index],\r\n\t\t\t\t\t\tvisible: (response.axes !== undefined) ? (index < response.axes) : true\r\n\t\t\t\t\t})),\r\n\t\t\t\t\tcompensation: {\r\n\t\t\t\t\t\ttype: response.compensation\r\n\t\t\t\t\t},\r\n\t\t\t\t\tkinematics: {\r\n\t\t\t\t\t\tname: response.geometry\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tnetwork: {\r\n\t\t\t\t\tname: response.name\r\n\t\t\t\t},\r\n\t\t\t\tsensors: {\r\n\t\t\t\t\tendstops: [...Array(response.coords.xyz.length + response.coords.extr.length)].map((dummy, drive) => ({\r\n\t\t\t\t\t\ttriggered: Boolean(response.endstops & (1 << drive))\r\n\t\t\t\t\t})),\r\n\t\t\t\t\tprobes: (response.probe && response.probe.type !== 0) ? [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthreshold: response.probe.threshold,\r\n\t\t\t\t\t\t\ttriggerHeight: response.probe.height,\r\n\t\t\t\t\t\t\ttype: response.probe.type\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t] : []\r\n\t\t\t\t},\r\n\t\t\t\tstate: {\r\n\t\t\t\t\tmachineMode: response.mode ? response.mode : null,\r\n\t\t\t\t},\r\n\t\t\t\ttools: (response.tools !== undefined) ? response.tools.map(tool => ({\r\n\t\t\t\t\tnumber: tool.number,\r\n\t\t\t\t\tname: tool.name ? tool.name : '',\r\n\t\t\t\t\theaters: tool.heaters,\r\n\t\t\t\t\textruders: tool.drives,\r\n\t\t\t\t\taxes: tool.axisMap,\r\n\t\t\t\t\tfans: bitmapToArray(tool.fans),\r\n\t\t\t\t\tfilamentExtruder: (tool.drives.length > 0) ? tool.drives[0] : -1,\r\n\t\t\t\t\toffsets: tool.offsets\r\n\t\t\t\t})) : []\r\n\t\t\t});\r\n\r\n\t\t\tnewData.heat.heaters.forEach(heater => heater.max = response.tempLimit);\r\n\r\n\t\t\tresponse.tools.forEach(tool => {\r\n\t\t\t\tif (tool.drives.length > 0) {\r\n\t\t\t\t\tconst drive = tool.drives[0];\r\n\t\t\t\t\tif (drive >= 0 && drive < newData.move.extruders.length) {\r\n\t\t\t\t\t\tnewData.move.extruders[0].filament = tool.filament;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (response.temps.names !== undefined) {\r\n\t\t\t\tresponse.temps.names.forEach((name, index) => newData.sensors.analog[index].name = name);\r\n\t\t\t}\r\n\r\n\t\t\tnewData.volumes = [];\r\n\t\t\tfor (let i = 0; i < response.volumes; i++) {\r\n\t\t\t\tnewData.volumes.push({\r\n\t\t\t\t\tmounted: (response.mountedVolumes & (1 << i)) !== 0\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tresponse.tools.forEach(tool => {\r\n\t\t\t\tif (tool.drives.length > 0) {\r\n\t\t\t\t\tconst extruder = tool.drives[0];\r\n\t\t\t\t\tif (extruder >= 0 && extruder < newData.move.extruders.length && newData.move.extruders[extruder] !== null) {\r\n\t\t\t\t\t\tnewData.move.extruders[extruder].filament = tool.filament;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else if (statusType === 3) {\r\n\t\t\tif (!newData.job) {\r\n\t\t\t\tnewData.job = {};\r\n\t\t\t}\r\n\r\n\t\t\t// Print Status Response\r\n\t\t\tquickPatch(newData.job, {\r\n\t\t\t\tfile: {},\r\n\t\t\t\tfilePosition: response.filePosition\r\n\t\t\t});\r\n\t\t\tresponse.extrRaw.forEach((rawPosition, extruder) => newData.move.extruders[extruder].rawPosition = rawPosition);\r\n\r\n\t\t\t// Update some stats only if the print is still live\r\n\t\t\tif (isPrinting) {\r\n\t\t\t\tquickPatch(newData.job, {\r\n\t\t\t\t\tduration: response.printDuration,\r\n\t\t\t\t\tlayer: response.currentLayer,\r\n\t\t\t\t\tlayerTime: response.currentLayerTime,\r\n\t\t\t\t\twarmUpDuration: response.warmUpDuration,\r\n\t\t\t\t\ttimesLeft: {\r\n\t\t\t\t\t\tfile: response.timesLeft.file,\r\n\t\t\t\t\t\tfilament: response.timesLeft.filament,\r\n\t\t\t\t\t\tlayer: response.timesLeft.layer\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tquickPatch(newData.job, {\r\n\t\t\t\t\tlayerTime: null,\r\n\t\t\t\t\ttimesLeft: {\r\n\t\t\t\t\t\tfile: null,\r\n\t\t\t\t\t\tfilament: null,\r\n\t\t\t\t\t\tlayer: null\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// See if we need to record more layer stats\r\n\t\t\tif (response.currentLayer > this.layers.length) {\r\n\t\t\t\tlet addLayers = false;\r\n\t\t\t\tif (!this.layers.length) {\r\n\t\t\t\t\t// Is the first layer complete?\r\n\t\t\t\t\tif (response.currentLayer > 1) {\r\n\t\t\t\t\t\tthis.layers.push({\r\n\t\t\t\t\t\t\tduration: response.firstLayerDuration,\r\n\t\t\t\t\t\t\theight: this.currentFileInfo.firstLayerHeight,\r\n\t\t\t\t\t\t\tfilament: (response.currentLayer === 2) ? response.extrRaw.filter(amount => amount > 0) : null,\r\n\t\t\t\t\t\t\tfractionPrinted: (response.currentLayer === 2) ? response.fractionPrinted / 100 : null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tnewData.job.layers = this.layers;\r\n\r\n\t\t\t\t\t\t// Keep track of the past layer\r\n\t\t\t\t\t\tif (response.currentLayer === 2) {\r\n\t\t\t\t\t\t\tthis.printStats.duration = response.warmUpDuration + response.firstLayerDuration;\r\n\t\t\t\t\t\t\tthis.printStats.extrRaw = response.extrRaw;\r\n\t\t\t\t\t\t\tthis.printStats.fractionPrinted = response.fractionPrinted;\r\n\t\t\t\t\t\t\tthis.printStats.measuredLayerHeight = response.coords.xyz[2] - this.currentFileInfo.firstLayerHeight;\r\n\t\t\t\t\t\t\tthis.printStats.zPosition = response.coords.xyz[2];\r\n\t\t\t\t\t\t} else if (response.currentLayer > this.layers.length + 1) {\r\n\t\t\t\t\t\t\taddLayers = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (response.currentLayer > this.layers.length + 1) {\r\n\t\t\t\t\t// Another layer is complete, add it\r\n\t\t\t\t\taddLayers = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (addLayers) {\r\n\t\t\t\t\tconst layerJustChanged = (response.status === 'M') || ((response.currentLayer - this.layers.length) === 2);\r\n\t\t\t\t\tif (this.printStats.duration) {\r\n\t\t\t\t\t\t// Got info about the past layer, add what we know\r\n\t\t\t\t\t\tthis.layers.push({\r\n\t\t\t\t\t\t\tduration: response.printDuration - this.printStats.duration,\r\n\t\t\t\t\t\t\theight: this.printStats.measuredLayerHeight ? this.printStats.measuredLayerHeight : this.printStats.layerHeight,\r\n\t\t\t\t\t\t\tfilament: response.extrRaw.map((amount, index) => amount - this.printStats.extrRaw[index]).filter((dummy, index) => response.extrRaw[index] > 0),\r\n\t\t\t\t\t\t\tfractionPrinted: (response.fractionPrinted - this.printStats.fractionPrinted) / 100\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Interpolate data...\r\n\t\t\t\t\t\tconst avgDuration = (response.printDuration - response.warmUpDuration - response.firstLayerDuration - response.currentLayerTime) / (response.currentLayer - 2);\r\n\t\t\t\t\t\tfor (let layer = this.layers.length; layer + 1 < response.currentLayer; layer++) {\r\n\t\t\t\t\t\t\tthis.layers.push({ duration: avgDuration });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.printStats.zPosition = response.coords.xyz[2];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnewData.job.layers = this.layers;\r\n\r\n\t\t\t\t\t// Keep track of the past layer if the layer change just happened\r\n\t\t\t\t\tif (layerJustChanged) {\r\n\t\t\t\t\t\tthis.printStats.duration = response.printDuration;\r\n\t\t\t\t\t\tthis.printStats.extrRaw = response.extrRaw;\r\n\t\t\t\t\t\tthis.printStats.fractionPrinted = response.fractionPrinted;\r\n\t\t\t\t\t\tthis.printStats.measuredLayerHeight = response.coords.xyz[2] - this.printStats.zPosition;\r\n\t\t\t\t\t\tthis.printStats.zPosition = response.coords.xyz[2];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Output Utilities\r\n\t\tlet beepFrequency = 0, beepDuration = 0, displayMessage = '', messageBox = null;\r\n\t\tif (response.output) {\r\n\t\t\t// Beep\r\n\t\t\tif (response.output.beepFrequency !== undefined && response.output.beepDuration !== undefined) {\r\n\t\t\t\tbeepFrequency = response.output.beepFrequency;\r\n\t\t\t\tbeepDuration = response.output.beepDuration;\r\n\t\t\t}\r\n\r\n\t\t\t// Persistent Message\r\n\t\t\tif (response.output.message !== undefined) {\r\n\t\t\t\tdisplayMessage = response.output.message;\r\n\t\t\t}\r\n\r\n\t\t\t// Message Box\r\n\t\t\tif (response.output.msgBox) {\r\n\t\t\t\tmessageBox = new MessageBox({\r\n\t\t\t\t\tmode: response.output.msgBox.mode,\r\n\t\t\t\t\ttitle: response.output.msgBox.title,\r\n\t\t\t\t\tmessage: response.output.msgBox.msg,\r\n\t\t\t\t\ttimeout: response.output.msgBox.timeout,\r\n\t\t\t\t\taxisControls: response.output.msgBox.controls\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tquickPatch(newData, {\r\n\t\t\tstate: {\r\n\t\t\t\tbeep: (beepFrequency > 0 && beepDuration > 0) ? new BeepRequest({\r\n\t\t\t\t\tfrequency: beepFrequency,\r\n\t\t\t\t\tduration: beepDuration\r\n\t\t\t\t}) : null,\r\n\t\t\t\tdisplayMessage,\r\n\t\t\t\tmessageBox\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Spindles\r\n\t\tif (response.spindles) {\r\n\t\t\tquickPatch(newData, {\r\n\t\t\t\tspindles: response.spindles.map(spindle => ({\r\n\t\t\t\t\tactive: spindle.active,\r\n\t\t\t\t\tcurrent: spindle.current,\r\n\t\t\t\t\ttool: spindle.tool\r\n\t\t\t\t}))\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Remove invalid heaters\r\n\t\tfor (let i = 0; i < newData.heat.heaters.length; i++) {\r\n\t\t\tconst heater = newData.heat.heaters[i];\r\n\t\t\tif (heater && heater.state === HeaterState.off) {\r\n\t\t\t\tif (heater.sensor < 0 || heater.sensor >= newData.sensors.analog.length ||\r\n\t\t\t\t\tnewData.sensors.analog[heater.sensor].lastReading === 2000) {\r\n\t\t\t\t\tnewData.heat.heaters[i] = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Update the data model\r\n\t\tawait this.dispatch('update', newData);\r\n\r\n\t\t// Check if the G-code response needs to be polled\r\n\t\tif (response.seq !== this.lastSeq) {\r\n\t\t\tawait this.getGCodeReply(response.seq);\r\n\t\t\tthis.lastSeq = response.seq;\r\n\t\t}\r\n\r\n\t\t// Check if the firmware rebooted\r\n\t\tif (!this.justConnected && response.time < this.lastStatusResponse.time) {\r\n\t\t\tthis.pendingCodes.forEach(code => code.reject(new OperationCancelledError()));\r\n\t\t\tthis.pendingCodes = [];\r\n\t\t}\r\n\r\n\t\t// Sometimes we need to update the config as well\r\n\t\tif (requestExtendedStatus || this.justConnected || (this.verbose && this.updateLoopCounter % 2 === 0)) {\r\n\t\t\tawait this.getConfigResponse();\r\n\t\t}\r\n\r\n\t\t// Status update complete\r\n\t\tthis.lastStatusResponse = response;\r\n\t\tthis.justConnected = false;\r\n\t\tthis.updateLoopCounter++;\r\n\r\n\t\t// Schedule the next status update\r\n\t\tthis.scheduleUpdate();\r\n\t}\r\n\r\n\tconvertHeaterState(state) {\r\n\t\tconst keys = Object.keys(HeaterState);\r\n\t\tif (state >= 0 && state < keys.length) {\r\n\t\t\treturn keys[state];\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconvertStatusLetter(letter) {\r\n\t\tswitch (letter) {\r\n\t\t\tcase 'F': return 'updating';\r\n\t\t\tcase 'O': return 'off';\r\n\t\t\tcase 'H': return 'halted';\r\n\t\t\tcase 'D': return 'pausing';\r\n\t\t\tcase 'S': return 'paused';\r\n\t\t\tcase 'R': return 'resuming';\r\n\t\t\tcase 'P': return 'processing';\r\n\t\t\tcase 'M': return 'simulating';\r\n\t\t\tcase 'B': return 'busy';\r\n\t\t\tcase 'T': return 'changingTool';\r\n\t\t\tcase 'I': return 'idle';\r\n\t\t}\r\n\t\treturn 'unknown';\r\n\t}\r\n\r\n\t// Call this only from updateLoopStatus()\r\n\tasync getConfigResponse() {\r\n\t\tconst response = await this.request('GET', 'rr_config');\r\n\t\tconst configData = {\r\n\t\t\tboards: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: response.firmwareElectronics,\r\n\t\t\t\t\tfirmwareDate: response.firmwareDate,\r\n\t\t\t\t\tfirmwareName: response.firmwareName,\r\n\t\t\t\t\tfirmwareVersion: response.firmwareVersion\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tdirectories: (response.sysdir !== undefined) ? {\r\n\t\t\t\tsystem: response.sysdir\r\n\t\t\t} : {},\r\n\t\t\tmove: {\r\n\t\t\t\taxes: response.axisMins.map((min, index) => ({\r\n\t\t\t\t\tacceleration: response.accelerations[index],\r\n\t\t\t\t\tcurrent: response.currents[index],\r\n\t\t\t\t\tjerk: response.minFeedrates[index],\r\n\t\t\t\t\tmin,\r\n\t\t\t\t\tmax: response.axisMaxes[index],\r\n\t\t\t\t\tspeed: response.maxFeedrates[index]\r\n\t\t\t\t})),\r\n\t\t\t\textruders: [...Array(this.numExtruders)].map((dummy, index) => ({\r\n\t\t\t\t\tacceleration: response.accelerations[response.axisMins.length + index],\r\n\t\t\t\t\tcurrent: response.currents[response.axisMins.length + index],\r\n\t\t\t\t\tjerk: response.minFeedrates[response.axisMins.length + index],\r\n\t\t\t\t\tspeed: response.maxFeedrates[response.axisMins.length + index]\r\n\t\t\t\t})),\r\n\t\t\t\tidle: {\r\n\t\t\t\t\tfactor: response.idleCurrentFactor,\r\n\t\t\t\t\ttimeout: response.idleTimeout\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tnetwork: {\r\n\t\t\t\tinterfaces: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: (response.dwsVersion !== undefined) ? 'wifi' : 'lan',\r\n\t\t\t\t\t\tfirmwareVersion: response.dwsVersion\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tawait this.dispatch('update', configData);\r\n\t}\r\n\r\n\tlastSeqs = {}\r\n\tlastStatus = null\r\n\tlastUptime = 0\r\n\tasync updateLoopModel() {\r\n\t\tlet jobKey = null, extruders = [], status = null, zPosition = null;\r\n\t\tif (this.justConnected) {\r\n\t\t\tthis.justConnected = false;\r\n\r\n\t\t\t// Query the seqs field and the G-code reply\r\n\t\t\tthis.lastSeqs = (await this.request('GET', 'rr_model', { key: 'seqs' })).result;\r\n\t\t\tif (this.lastSeqs == null || this.lastSeqs.reply === undefined) {\r\n\t\t\t\tconsole.warn('Incompatible rr_model version detected, falling back to status responses');\r\n\t\t\t\twindow.forceLegacyConnect = true;\r\n\t\t\t\tBaseConnector.setConnectingProgress(-1);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (this.lastSeqs.reply > 0) {\r\n\t\t\t\tawait this.getGCodeReply(this.lastSeqs.reply);\r\n\t\t\t}\r\n\r\n\t\t\t// Query the full object model initially\r\n\t\t\ttry {\r\n\t\t\t\tlet keyIndex = 1, numKeys = Object.keys(DefaultMachineModel).length;\r\n\t\t\t\tfor (let key in DefaultMachineModel) {\r\n\t\t\t\t\tconst keyResponse = await this.request('GET', 'rr_model', { key, flags: 'd99vn' });\r\n\t\t\t\t\tawait this.dispatch('update', { [key]: keyResponse.result });\r\n\t\t\t\t\tBaseConnector.setConnectingProgress((keyIndex++ / numKeys) * 100);\r\n\r\n\t\t\t\t\tif (key === 'job') {\r\n\t\t\t\t\t\tjobKey = keyResponse.result;\r\n\t\t\t\t\t} else if (key === 'move') {\r\n\t\t\t\t\t\textruders = keyResponse.result.extruders;\r\n\t\t\t\t\t\tzPosition = (keyResponse.result.axes.length > 2) ? keyResponse.result.axes[2].userPosition : null;\r\n\t\t\t\t\t} else if (key === 'state') {\r\n\t\t\t\t\t\tstatus = keyResponse.result.status;\r\n\t\t\t\t\t\tthis.lastUptime = keyResponse.result.upTime;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} finally {\r\n\t\t\t\tBaseConnector.setConnectingProgress(-1);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Query live values\r\n\t\t\tconst response = await this.request('GET', 'rr_model', { flags: 'd99fn' }), seqs = response.result.seqs;\r\n\t\t\textruders = response.result.move.extruders;\r\n\t\t\tdelete response.result.seqs;\r\n\t\t\tstatus = response.result.state.status;\r\n\t\t\tzPosition = (response.result.move.axes.length > 2) ? response.result.move.axes[2].userPosition : null;\r\n\r\n\t\t\t// Apply new values\r\n\t\t\tif (!isPrinting(status) && isPrinting(this.lastStatus)) {\r\n\t\t\t\tresponse.result.job.lastFileCancelled = isPaused(this.lastStatus);\r\n\t\t\t\tresponse.result.job.lastFileSimulated = (this.lastStatus === StatusType.simulating);\r\n\t\t\t}\r\n\t\t\tawait this.dispatch('update', response.result);\r\n\r\n\t\t\t// Check if any of the non-live fields have changed and query them if so\r\n\t\t\tfor (let key in DefaultMachineModel) {\r\n\t\t\t\tif (this.lastSeqs[key] !== seqs[key]) {\r\n\t\t\t\t\tconst keyResponse = await this.request('GET', 'rr_model', { key, flags: 'd99vn' });\r\n\t\t\t\t\tawait this.dispatch('update', { [key]: keyResponse.result });\r\n\r\n\t\t\t\t\tif (key === 'job') {\r\n\t\t\t\t\t\tjobKey = keyResponse.result;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Check if the firmware has rebooted\r\n\t\t\tif (response.result.state.upTime < this.lastUptime) {\r\n\t\t\t\tthis.justConnected = true;\r\n\t\t\t\tthis.pendingCodes.forEach(code => code.reject(new OperationCancelledError()));\r\n\t\t\t\tthis.pendingCodes = [];\r\n\r\n\t\t\t\t// Send the rr_connect request and datetime again after a firmware reset\r\n\t\t\t\tawait this.request('GET', 'rr_connect', {\r\n\t\t\t\t\tpassword: this.password,\r\n\t\t\t\t\ttime: timeToStr(new Date())\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.lastUptime = response.result.state.upTime;\r\n\r\n\t\t\t// Finally check if there is a new G-code reply available\r\n\t\t\tif (this.lastSeqs.reply !== seqs.reply) {\r\n\t\t\t\tawait this.getGCodeReply(seqs.reply);\r\n\t\t\t}\r\n\t\t\tthis.lastSeqs = seqs;\r\n\t\t}\r\n\r\n\t\t// See if we need to record more layer stats\r\n\t\tif (jobKey && isPrinting(status)) {\r\n\t\t\tlet layersChanged = false;\r\n\t\t\tif (!isPrinting(this.lastStatus)) {\r\n\t\t\t\tthis.layers = [];\r\n\t\t\t\tlayersChanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tconst extrRaw = extruders.map(extruder => extruder.rawPosition);\r\n\t\t\tconst fractionPrinted = (jobKey.size > 0) ? (jobKey.filePosition / jobKey.file.size) : 0;\r\n\t\t\tlet addLayers = false;\r\n\t\t\tif (this.layers.length === 0) {\r\n\t\t\t\t// Is the first layer complete?\r\n\t\t\t\tif (jobKey.layer > 1) {\r\n\t\t\t\t\tthis.layers.push({\r\n\t\t\t\t\t\tduration: jobKey.firstLayerDuration,\r\n\t\t\t\t\t\theight: jobKey.file.firstLayerHeight,\r\n\t\t\t\t\t\tfilament: (jobKey.layer === 2) ? extrRaw : null,\r\n\t\t\t\t\t\tfractionPrinted: (jobKey.layer === 2) ? fractionPrinted : null\r\n\t\t\t\t\t});\r\n\t\t\t\t\tlayersChanged = true;\r\n\r\n\t\t\t\t\t// Keep track of the past layer\r\n\t\t\t\t\tif (jobKey.layer === 2) {\r\n\t\t\t\t\t\tthis.printStats.duration = jobKey.warmUpDuration + jobKey.firstLayerDuration;\r\n\t\t\t\t\t\tthis.printStats.extrRaw = extrRaw;\r\n\t\t\t\t\t\tthis.printStats.fractionPrinted = fractionPrinted;\r\n\t\t\t\t\t\tthis.printStats.measuredLayerHeight = zPosition - jobKey.file.firstLayerHeight;\r\n\t\t\t\t\t\tthis.printStats.zPosition = zPosition;\r\n\t\t\t\t\t} else if (jobKey.layer > this.layers.length + 1) {\r\n\t\t\t\t\t\taddLayers = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (jobKey.layer > this.layers.length + 1) {\r\n\t\t\t\t// Another layer is complete, add it\r\n\t\t\t\taddLayers = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (addLayers) {\r\n\t\t\t\tif (this.printStats.duration) {\r\n\t\t\t\t\t// Got info about the past layer, add what we know\r\n\t\t\t\t\tthis.layers.push({\r\n\t\t\t\t\t\tduration: jobKey.duration - this.printStats.duration,\r\n\t\t\t\t\t\theight: this.printStats.measuredLayerHeight ? this.printStats.measuredLayerHeight : this.printStats.layerHeight,\r\n\t\t\t\t\t\tfilament: extrRaw\r\n\t\t\t\t\t\t.map((amount, index) => amount - this.printStats.extrRaw[index])\r\n\t\t\t\t\t\t.filter((dummy, index) => extrRaw[index] > 0),\r\n\t\t\t\t\t\tfractionPrinted: fractionPrinted - this.printStats.fractionPrinted\r\n\t\t\t\t\t});\r\n\t\t\t\t\tlayersChanged = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Interpolate data...\r\n\t\t\t\t\tconst avgDuration = (jobKey.duration - jobKey.warmUpDuration - jobKey.firstLayerDuration - jobKey.layerTime) / (jobKey.layer - 2);\r\n\t\t\t\t\tfor (let layer = this.layers.length; layer + 1 < jobKey.layer; layer++) {\r\n\t\t\t\t\t\tthis.layers.push({ duration: avgDuration });\r\n\t\t\t\t\t\tlayersChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Keep track of the past layer if new layers have been added\r\n\t\t\t\tif (layersChanged) {\r\n\t\t\t\t\tthis.printStats.duration = jobKey.duration;\r\n\t\t\t\t\tthis.printStats.extrRaw = extrRaw;\r\n\t\t\t\t\tthis.printStats.fractionPrinted = fractionPrinted;\r\n\t\t\t\t\tthis.printStats.measuredLayerHeight = zPosition - this.printStats.zPosition;\r\n\t\t\t\t\tthis.printStats.zPosition = zPosition;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (layersChanged) {\r\n\t\t\t\tawait this.dispatch('update', {\r\n\t\t\t\t\tjob: {\r\n\t\t\t\t\t\tlayers: this.layers\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Schedule the next status update\r\n\t\tthis.lastStatus = status;\r\n\t\tthis.scheduleUpdate();\r\n\t}\r\n\r\n\tasync doUpdate() {\r\n\t\tthis.updateLoopTimer = null;\r\n\t\ttry {\r\n\t\t\tif (!window.forceLegacyConnect && this.apiLevel >= 1) {\r\n\t\t\t\t// Request object model updates\r\n\t\t\t\tawait this.updateLoopModel();\r\n\t\t\t} else {\r\n\t\t\t\t// Request updates using the legacy poll adapter\r\n\t\t\t\tawait this.updateLoopStatus();\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.warn(e);\r\n\t\t\tawait this.dispatch('onConnectionError', e);\r\n\t\t}\r\n\t}\r\n\r\n\tscheduleUpdate() {\r\n\t\tif (!this.updateLoopTimer) {\r\n\t\t\tthis.updateLoopTimer = setTimeout(this.doUpdate.bind(this), this.settings.updateInterval);\r\n\t\t}\r\n\t}\r\n\r\n\tasync sendCode(code) {\r\n\t\tconst response = await this.request('GET', 'rr_gcode', { gcode: code });\r\n\t\tif (!(response instanceof Object)) {\r\n\t\t\tconsole.warn(`Received bad response for rr_gcode: ${JSON.stringify(response)}`);\r\n\t\t\tthrow new CodeResponseError();\r\n\t\t}\r\n\t\tif (response.buff === 0) {\r\n\t\t\tthrow new CodeBufferError();\r\n\t\t}\r\n\r\n\t\tlet inBraces = false;\r\n\t\tfor (let i = 0; i < code.length; i++) {\r\n\t\t\tif (inBraces) {\r\n\t\t\t\tinBraces = (code[i] !== ')');\r\n\t\t\t} else if (code[i] === '(') {\r\n\t\t\t\tinBraces = true;\r\n\t\t\t} else {\r\n\t\t\t\tif (code[i] === ';') {\r\n\t\t\t\t\treturn '';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (code[i] !== ' ' && code[i] !== '\\t' && code[i] !== '\\r' && code !== '\\n') {\r\n\t\t\t\t\tconst pendingCodes = this.pendingCodes, seq = this.lastSeq;\r\n\t\t\t\t\treturn new Promise((resolve, reject) => pendingCodes.push({ seq, resolve, reject }));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync getGCodeReply(seq) {\r\n\t\tconst response = await this.request('GET', 'rr_reply', this.requestTimeout, 'text');\r\n\t\tconst reply = response.trim();\r\n\r\n\t\t// TODO? Check for special JSON responses generated by M119, see DWC1\r\n\t\t// Probably makes sense only as soon as the settings update notifications are working again\r\n\r\n\t\tif (!this.pendingCodes.length) {\r\n\t\t\t// Just log this response\r\n\t\t\tthis.dispatch('onCodeCompleted', { code: undefined, reply });\r\n\t\t} else {\r\n\t\t\t// Resolve pending code promises\r\n\t\t\tthis.pendingCodes.forEach(function(code) {\r\n\t\t\t\tif (code.seq < seq) {\r\n\t\t\t\t\tcode.resolve(reply);\r\n\t\t\t\t\tthis.dispatch('onCodeCompleted', { code, reply });\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\tthis.pendingCodes = this.pendingCodes.filter(code => code.seq >= seq);\r\n\t\t}\r\n\t}\r\n\r\n\tasync upload({ filename, content, cancellationToken = null, onProgress }) {\r\n\t\t// Create upload options\r\n\t\tconst payload = (content instanceof(Blob)) ? content : new Blob([content]);\r\n\t\tconst params = {\r\n\t\t\tname: filename,\r\n\t\t\ttime: timeToStr(content.lastModified ? new Date(content.lastModified) : new Date())\r\n\t\t};\r\n\r\n\t\t// Check if the CRC32 checksum is required\r\n\t\tif (this.settings.crcUploads) {\r\n\t\t\tconst checksum = await new Promise(function(resolve) {\r\n\t\t\t\tconst fileReader = new FileReader();\r\n\t\t\t\tfileReader.onload = function(e){\r\n\t\t\t\t\tconst result = crc32(e.target.result);\r\n\t\t\t\t\tresolve(result);\r\n\t\t\t\t}\r\n\t\t\t\tfileReader.readAsArrayBuffer(payload);\r\n\t\t\t});\r\n\r\n\t\t\tparams.crc32 = checksum.toString(16);\r\n\t\t}\r\n\r\n\t\t// Perform actual upload in the background\r\n\t\tconst response = await this.request('POST', 'rr_upload', params, 'json', payload, onProgress, 0, cancellationToken, filename);\r\n\t\tif (response.err !== 0) {\r\n\t\t\tthrow new OperationFailedError(`err ${response.err}`);\r\n\t\t}\r\n\r\n\t\t// Upload successful\r\n\t\tthis.dispatch('onFileUploaded', { filename, content });\r\n\t}\r\n\r\n\tasync delete(filename) {\r\n\t\tconst response = await this.request('GET', 'rr_delete', { name: filename }, 'json', null, null, this.requestTimeout, null, filename);\r\n\t\tif (response.err !== 0) {\r\n\t\t\tthrow new OperationFailedError(`err ${response.err}`);\r\n\t\t}\r\n\r\n\t\tawait this.dispatch('onFileOrDirectoryDeleted', filename);\r\n\t}\r\n\r\n\tasync move({ from, to, force = false, silent = false }) {\r\n\t\tconst response = await this.request('GET', 'rr_move', {\r\n\t\t\told: from,\r\n\t\t\tnew: to,\r\n\t\t\tdeleteexisting: force ? 'yes' : 'no'\r\n\t\t}, 'json', null, null, this.requestTimeout, null, from);\r\n\r\n\t\tif (!silent) {\r\n\t\t\tif (response.err !== 0) {\r\n\t\t\t\tthrow new OperationFailedError(`err ${response.err}`);\r\n\t\t\t}\r\n\r\n\t\t\tawait this.dispatch('onFileOrDirectoryMoved', { from, to, force });\r\n\t\t}\r\n\t}\r\n\r\n\tasync makeDirectory(directory) {\r\n\t\tconst response = await this.request('GET', 'rr_mkdir', { dir: directory });\r\n\t\tif (response.err !== 0) {\r\n\t\t\tthrow new OperationFailedError(`err ${response.err}`);\r\n\t\t}\r\n\r\n\t\tawait this.dispatch('onDirectoryCreated', directory);\r\n\t}\r\n\r\n\tasync download(payload) {\r\n\t\tconst filename = (payload instanceof Object) ? payload.filename : payload;\r\n\t\tconst type = (payload instanceof Object && payload.type !== undefined) ? payload.type : 'json';\r\n\t\tconst onProgress = (payload instanceof Object) ? payload.onProgress : undefined;\r\n\t\tconst cancellationToken = (payload instanceof Object && payload.cancellationToken) ? payload.cancellationToken : null;\r\n\r\n\t\tconst response = await this.request('GET', 'rr_download', { name: filename }, type, null, onProgress, 0, cancellationToken, filename);\r\n\r\n\t\tthis.dispatch('onFileDownloaded', { filename, content: response });\r\n\t\treturn response;\r\n\t}\r\n\r\n\tasync getFileList(directory) {\r\n\t\tlet fileList = [], next = 0;\r\n\t\tdo {\r\n\t\t\tconst response = await this.request('GET', 'rr_filelist', { dir: directory, first: next });\r\n\t\t\tif (response.err === 1) {\r\n\t\t\t\tthrow new DriveUnmountedError();\r\n\t\t\t} else if (response.err === 2) {\r\n\t\t\t\tthrow new DirectoryNotFoundError(directory);\r\n\t\t\t}\r\n\r\n\t\t\tfileList = fileList.concat(response.files);\r\n\t\t\tnext = response.next;\r\n\t\t} while (next !== 0);\r\n\r\n\t\treturn fileList.map(item => ({\r\n\t\t\tisDirectory: item.type === 'd',\r\n\t\t\tname: item.name,\r\n\t\t\tsize: (item.type === 'd') ? null : item.size,\r\n\t\t\tlastModified: strToTime(item.date)\r\n\t\t}));\r\n\t}\r\n\r\n\tasync getFileInfo(filename) {\r\n\t\tconst response = await this.request('GET', 'rr_fileinfo', filename ? { name: filename } : {}, 'json', null, null, this.sessionTimeout, null, filename);\r\n\t\tif (response.err) {\r\n\t\t\tthrow new OperationFailedError(`err ${response.err}`);\r\n\t\t}\r\n\r\n\t\tdelete response.err;\r\n\t\treturn new ParsedFileInfo(response);\r\n\t}\r\n}\r\n"]}]}