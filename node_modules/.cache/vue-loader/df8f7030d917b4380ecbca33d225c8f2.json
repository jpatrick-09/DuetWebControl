{"remainingRequest":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\components\\buttons\\UploadBtn.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\components\\buttons\\UploadBtn.vue","mtime":1592248188509},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["UploadBtn.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmfile":"UploadBtn.vue","sourceRoot":"src/components/buttons","sourcesContent":["<template>\r\n\t<div>\r\n\t\t<v-btn v-bind=\"$props\" @click=\"chooseFile\" :disabled=\"$props.disabled || !canUpload\" :loading=\"isBusy\" :title=\"$t(`button.upload['${target}'].title`)\" :color=\"innerColor\" @dragover=\"dragOver\" @dragleave=\"dragLeave\" @drop.prevent.stop=\"dragDrop\">\r\n\t\t\t<template #loader>\r\n\t\t\t\t<v-progress-circular indeterminate :size=\"23\" :width=\"2\" class=\"mr-2\"></v-progress-circular>\r\n\t\t\t\t{{ caption }}\r\n\t\t\t</template>\r\n\r\n\t\t\t<slot>\r\n\t\t\t\t<v-icon class=\"mr-2\">mdi-cloud-upload</v-icon> {{ caption }}\r\n\t\t\t</slot>\r\n\t\t</v-btn>\r\n\r\n\t\t<input ref=\"fileInput\" type=\"file\" :accept=\"accept\" hidden @change=\"fileSelected\" multiple>\r\n\t\t<confirm-dialog :shown.sync=\"confirmUpdate\" :title=\"$t('dialog.update.title')\" :prompt=\"$t('dialog.update.prompt')\" @confirmed=\"startUpdate\"></confirm-dialog>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n'use strict'\r\n\r\nimport JSZip from 'jszip'\r\nimport { VBtn } from 'vuetify/lib'\r\n\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n\r\nimport { NetworkInterfaceType, StatusType } from '../../store/machine/modelEnums.js'\r\nimport Path from '../../utils/path.js'\r\nimport { DisconnectedError } from '../../utils/errors.js'\r\n\r\nconst webExtensions = ['.htm', '.html', '.ico', '.xml', '.css', '.map', '.js', '.ttf', '.eot', '.svg', '.woff', '.woff2', '.jpeg', '.jpg', '.png']\r\n\r\nexport default {\r\n\tcomputed: {\r\n\t\t...mapState(['isLocal']),\r\n\t\t...mapState('machine/model', ['boards', 'directories', 'network', 'state']),\r\n\t\t...mapGetters(['isConnected', 'uiFrozen']),\r\n\t\tcaption() {\r\n\t\t\tif (this.extracting) {\r\n\t\t\t\treturn this.$t('generic.extracting');\r\n\t\t\t}\r\n\t\t\tif (this.uploading) {\r\n\t\t\t\treturn this.$t('generic.uploading');\r\n\t\t\t}\r\n\t\t\treturn this.$t(`button.upload['${this.target}'].caption`);\r\n\t\t},\r\n\t\tcanUpload() {\r\n\t\t\treturn this.isConnected && !this.uiFrozen;\r\n\t\t},\r\n\t\taccept() {\r\n\t\t\tswitch (this.target) {\r\n\t\t\t\tcase 'gcodes': return '.g,.gcode,.gc,.gco,.nc,.ngc,.tap';\r\n\t\t\t\tcase 'start': return '.g,.gcode,.gc,.gco,.nc,.ngc,.tap';\r\n\t\t\t\tcase 'macros': return '*';\r\n\t\t\t\tcase 'filaments': return '.zip';\r\n\t\t\t\tcase 'firmware': return '.zip,.bin';\r\n\t\t\t\tcase 'menu': return '*';\r\n\t\t\t\tcase 'system': return '.zip,.bin,.json,.g,.csv';\r\n\t\t\t\tcase 'web': return '.zip,.csv,.json,.htm,.html,.ico,.xml,.css,.map,.js,.ttf,.eot,.svg,.woff,.woff2,.jpeg,.jpg,.png,.gz';\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\t\t},\r\n\t\tdestinationDirectory() {\r\n\t\t\tif (this.directory) {\r\n\t\t\t\treturn this.directory;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (this.target) {\r\n\t\t\t\tcase 'gcodes': return this.directories.gCodes;\r\n\t\t\t\tcase 'start': return this.directories.gCodes;\r\n\t\t\t\tcase 'firmware': return this.directories.firmware;\r\n\t\t\t\tcase 'macros': return this.directories.macros;\r\n\t\t\t\tcase 'filaments': return this.directories.filaments;\r\n\t\t\t\tcase 'menu': return this.directories.menu;\r\n\t\t\t\tcase 'system': return this.directories.system;\r\n\t\t\t\tcase 'web': return this.directories.web;\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\t\t},\r\n\t\tisBusy() {\r\n\t\t\treturn this.extracting || this.uploading;\r\n\t\t}\r\n\t},\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tinnerColor: this.color,\r\n\t\t\textracting: false,\r\n\t\t\tuploading: false,\r\n\r\n\t\t\tconfirmUpdate: false,\r\n\t\t\tupdates: {\r\n\t\t\t\twebInterface: false,\r\n\t\t\t\tfirmwareBoards: [],\r\n\t\t\t\twifiServer: false,\r\n\t\t\t\twifiServerSpiffs: false,\r\n\r\n\t\t\t\tcodeSent: false\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\textends: VBtn,\r\n\tprops: {\r\n\t\tdirectory: String,\r\n\t\ttarget: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: true\r\n\t\t},\r\n\t\tuploadPrint: Boolean\r\n\t},\r\n\tmethods: {\r\n\t\t...mapActions('machine', ['sendCode', 'upload']),\r\n\t\tchooseFile() {\r\n\t\t\tif (!this.isBusy) {\r\n\t\t\t\tthis.$refs.fileInput.click();\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync fileSelected(e) {\r\n\t\t\tawait this.doUpload(e.target.files);\r\n\t\t\te.target.value = '';\r\n\t\t},\r\n\t\tisWebFile(filename) {\r\n\t\t\tif (webExtensions.some(extension => filename.toLowerCase().endsWith(extension))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tconst matches = /(\\.[^.]+).gz$/i.exec(filename);\r\n\t\t\tif (matches && webExtensions.indexOf(matches[1].toLowerCase()) !== -1) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tgetFirmwareName(fileName) {\r\n\t\t\tlet result = null;\r\n\t\t\tthis.boards.forEach((board, index) => {\r\n\t\t\t\tif (board && board.firmwareFileName && (board.canAddress || index === 0)) {\r\n\t\t\t\t\tconst regEx = new RegExp(board.firmwareFileName.replace(/\\.bin$/, '(.*)\\\\.bin'), 'i');\r\n\t\t\t\t\tif (regEx.test(fileName)) {\r\n\t\t\t\t\t\tresult = board.firmwareFileName;\r\n\t\t\t\t\t\tthis.updates.firmwareBoards.push(board.canAddress || 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\tgetBinaryName(key, fileName) {\r\n\t\t\tlet result = null;\r\n\t\t\tthis.boards.forEach(board => {\r\n\t\t\t\tif (board && board[key]) {\r\n\t\t\t\t\tconst regEx = new RegExp(board[key].replace(/\\.bin$/, '(.*)\\\\.bin'), 'i');\r\n\t\t\t\t\tif (regEx.test(fileName)) {\r\n\t\t\t\t\t\tresult = board[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\tasync doUpload(files, zipName, startTime) {\r\n\t\t\tif (!files.length) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.target === 'start' && files.length !== 1) {\r\n\t\t\t\tthis.$makeNotification('error', this.$t(`button.upload['${this.target}'].caption`), this.$t('error.uploadStartWrongFileCount'));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!zipName) {\r\n\t\t\t\tif (files.length > 1 && files[0].name.toLowerCase().endsWith('.zip')) {\r\n\t\t\t\t\tthis.$makeNotification('error', this.$t(`button.upload['${this.target}'].caption`), this.$t('error.uploadNoSingleZIP'));\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (files[0].name.toLowerCase().endsWith('.zip')) {\r\n\t\t\t\t\tconst zip = new JSZip(), zipFiles = [], target = this.target;\r\n\t\t\t\t\tthis.extracting = true;\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t// Open the ZIP file and read its content\r\n\t\t\t\t\t\tawait zip.loadAsync(files[0], { checkCRC32: true });\r\n\t\t\t\t\t\tzip.forEach(function(file) {\r\n\t\t\t\t\t\t\tif (!file.endsWith('/') && (file.split('/').length === 2 || target !== 'filaments')) {\r\n\t\t\t\t\t\t\t\tzipFiles.push(file);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// Could we get anything useful?\r\n\t\t\t\t\t\tif (!zipFiles.length) {\r\n\t\t\t\t\t\t\tthis.extracting = false;\r\n\t\t\t\t\t\t\tthis.$makeNotification('error', this.$t(`button.upload['${this.target}'].caption`), this.$t('error.uploadNoFiles'));\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Extract everything and start the upload\r\n\t\t\t\t\t\tfor (let i = 0; i < zipFiles.length; i++) {\r\n\t\t\t\t\t\t\tconst name = zipFiles[i];\r\n\t\t\t\t\t\t\tzipFiles[i] = await zip.file(name).async('blob');\r\n\t\t\t\t\t\t\tzipFiles[i].name = name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.doUpload(zipFiles, files[0].name, new Date());\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tconsole.warn(e);\r\n\t\t\t\t\t\tthis.$makeNotification('error', this.$t('error.uploadDecompressionFailed'), e.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.extracting = false;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.updates.webInterface = false;\r\n\t\t\tthis.updates.firmwareBoards = [];\r\n\t\t\tthis.updates.wifiServer = false;\r\n\t\t\tthis.updates.wifiServerSpiffs = false;\r\n\r\n\t\t\tlet success = true;\r\n\t\t\tthis.uploading = true;\r\n\t\t\tfor (let i = 0; i < files.length; i++) {\r\n\t\t\t\tconst content = files[i];\r\n\r\n\t\t\t\t// Adjust filename if an update is being uploaded\r\n\t\t\t\tlet filename = Path.combine(this.destinationDirectory, content.name);\r\n\t\t\t\tif (this.target === 'system' || this.target === 'firmware') {\r\n\t\t\t\t\tif (Path.isSdPath('/' + content.name)) {\r\n\t\t\t\t\t\tfilename = Path.combine('0:/', content.name);\r\n\t\t\t\t\t} else if (this.isWebFile(content.name)) {\r\n\t\t\t\t\t\tfilename = Path.combine(this.directories.web, content.name);\r\n\t\t\t\t\t\tthis.updates.webInterface |= /index.html(\\.gz)?/i.test(content.name);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst firmwareFileName = this.getFirmwareName(content.name);\r\n\t\t\t\t\t\tconst bootloaderFileName = this.getBinaryName('bootloaderFileName', content.name);\r\n\t\t\t\t\t\tconst iapFileNameSBC = this.getBinaryName('iapFileNameSBC', content.name);\r\n\t\t\t\t\t\tconst iapFileNameSD = this.getBinaryName('iapFileNameSD', content.name);\r\n\t\t\t\t\t\tif (firmwareFileName) {\r\n\t\t\t\t\t\t\tfilename = Path.combine(this.directories.firmware, firmwareFileName);\r\n\t\t\t\t\t\t} else if (bootloaderFileName) {\r\n\t\t\t\t\t\t\tfilename = Path.combine(this.directories.firmware, bootloaderFileName);\r\n\t\t\t\t\t\t} else if (this.state.dsfVersion && iapFileNameSBC) {\r\n\t\t\t\t\t\t\tfilename = Path.combine(this.directories.firmware, iapFileNameSBC);\r\n\t\t\t\t\t\t} else if (iapFileNameSD) {\r\n\t\t\t\t\t\t\tfilename = Path.combine(this.directories.firmware, iapFileNameSD);\r\n\t\t\t\t\t\t} else if (!this.state.dsfVersion && this.network.interfaces.some(iface => iface.type === NetworkInterfaceType.wifi)) {\r\n\t\t\t\t\t\t\tif ((/DuetWiFiSocketServer(.*)\\.bin/i.test(content.name) || /DuetWiFiServer(.*)\\.bin/i.test(content.name))) {\r\n\t\t\t\t\t\t\t\tfilename = Path.combine(this.directories.firmware, 'DuetWiFiServer.bin');\r\n\t\t\t\t\t\t\t\tthis.updates.wifiServer = true;\r\n\t\t\t\t\t\t\t} else if (/DuetWebControl(.*)\\.bin/i.test(content.name)) {\r\n\t\t\t\t\t\t\t\tfilename = Path.combine(this.directories.firmware, 'DuetWebControl.bin');\r\n\t\t\t\t\t\t\t\tthis.updates.wifiServerSpiffs = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (content.name.endsWith('.bin')) {\r\n\t\t\t\t\t\t\t// FIXME This will be no longer needed when CAN board enumeration is supported\r\n\t\t\t\t\t\t\tfilename = Path.combine(this.directories.firmware, content.name);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Start uploading\r\n\t\t\t\t\tif (files.length > 1) {\r\n\t\t\t\t\t\tawait this.upload({ filename, content, showSuccess: !zipName, num: i + 1, count: files.length });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tawait this.upload({ filename, content });\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Run it (if required)\r\n\t\t\t\t\tif (this.target === 'start') {\r\n\t\t\t\t\t\tawait this.sendCode(`M32 \"${filename}\"`);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tsuccess = false;\r\n\t\t\t\t\tthis.$emit('uploadFailed', { filename, reason: e });\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.uploading = false;\r\n\r\n\t\t\tif (success) {\r\n\t\t\t\tthis.$emit('uploadComplete', files);\r\n\r\n\t\t\t\tif ((this.updates.firmwareBoards.length > 0) || this.updates.wifiServer || this.updates.wifiServerSpiffs) {\r\n\t\t\t\t\t// Ask user to perform an update\r\n\t\t\t\t\tthis.confirmUpdate = true;\r\n\t\t\t\t} else if (!this.isLocal && this.updates.webInterface) {\r\n\t\t\t\t\t// Reload the web interface immediately if it was the only update\r\n\t\t\t\t\tlocation.reload(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// FIXME For some reason the $t function throws an exception when this button is floating\r\n\t\t\t\tif (zipName) {\r\n\t\t\t\t\tconst secondsPassed = Math.round((new Date() - startTime) / 1000);\r\n\t\t\t\t\tthis.$makeNotification('success', this.$t('notification.upload.success', [zipName, this.$displayTime(secondsPassed)]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync startUpdate() {\r\n\t\t\t// Update expansion boards\r\n\t\t\tfor (let i = 0; i < this.updates.firmwareBoards.length; i++) {\r\n\t\t\t\tconst boardToUpdate = this.updates.firmwareBoards[i];\r\n\t\t\t\tif (boardToUpdate > 0) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tawait this.sendCode(`M997 B${boardToUpdate}`);\r\n\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\t// Wait in 2-second intervals until the status is no longer 'Updating'\r\n\t\t\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n\t\t\t\t\t\t\t// Stop if the connection has been interrupted\r\n\t\t\t\t\t\t\tif (!this.isConnected) {\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} while (this.state.status === StatusType.updating);\r\n\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tif (!(e instanceof DisconnectedError)) {\r\n\t\t\t\t\t\t\tconsole.warn(e);\r\n\t\t\t\t\t\t\tthis.$log('error', this.$t('generic.error'), e.message);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Update other modules\r\n\t\t\tlet modules = [];\r\n\t\t\tif (this.updates.firmwareBoards.indexOf(0) >= 0) {\r\n\t\t\t\tmodules.push('0');\r\n\t\t\t}\r\n\t\t\tif (this.updates.wifiServer) {\r\n\t\t\t\tmodules.push('1');\r\n\t\t\t}\r\n\t\t\tif (this.updates.wifiServerSpiffs) {\r\n\t\t\t\tmodules.push('2');\r\n\t\t\t}\r\n\r\n\t\t\tthis.updates.codeSent = true;\r\n\t\t\ttry {\r\n\t\t\t\tawait this.sendCode(`M997 S${modules.join(':')}`);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tif (!(e instanceof DisconnectedError)) {\r\n\t\t\t\t\tconsole.warn(e);\r\n\t\t\t\t\tthis.$log('error', this.$t('generic.error'), e.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tdragOver(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\te.stopPropagation();\r\n\t\t\tif (!this.isBusy) {\r\n\t\t\t\tthis.innerColor = 'success';\r\n\t\t\t}\r\n\t\t},\r\n\t\tdragLeave(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\te.stopPropagation();\r\n\t\t\tthis.innerColor = this.color;\r\n\t\t},\r\n\t\tasync dragDrop(e) {\r\n\t\t\tthis.innerColor = this.color;\r\n\t\t\tif (!this.isBusy && e.dataTransfer.files.length) {\r\n\t\t\t\tawait this.doUpload(e.dataTransfer.files);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\twatch: {\r\n\t\tisConnected(to) {\r\n\t\t\tif (to && !this.isLocal && this.updates.codeSent && this.updates.webInterface) {\r\n\t\t\t\t// Reload the web interface when the connection could be established again\r\n\t\t\t\tlocation.reload(true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n</script>\r\n"]}]}