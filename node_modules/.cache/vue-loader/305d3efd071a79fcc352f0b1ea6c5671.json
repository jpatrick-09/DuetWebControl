{"remainingRequest":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\components\\inputs\\ToolInput.vue?vue&type=style&index=0&id=6f152cac&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\components\\inputs\\ToolInput.vue","mtime":1592248188532},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoudG9vbC1pbnB1dCB7DQoJbWluLXdpZHRoOiA1cmVtOw0KfQ0K"},{"version":3,"sources":["ToolInput.vue"],"names":[],"mappings":";AACA;AACA;AACA","file":"ToolInput.vue","sourceRoot":"src/components/inputs","sourcesContent":["<style scoped>\r\n.tool-input {\r\n\tmin-width: 5rem;\r\n}\r\n</style>\r\n\r\n<template>\r\n\t<v-combobox ref=\"input\" type=\"number\" min=\"-273\" max=\"1999\" step=\"any\" class=\"tool-input\" :label=\"label\"\r\n\t\t\t\tv-model.number=\"value\" @keyup.enter=\"apply\" :loading=\"applying\" :disabled=\"uiFrozen || !isValid\"\r\n\t\t\t\t:items=\"items\" @change=\"change\" hide-selected @blur=\"value = actualValue\">\r\n\t</v-combobox>\r\n</template>\r\n\r\n<script>\r\n'use strict'\r\n\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n\r\nexport default {\r\n\tcomputed: {\r\n\t\t...mapGetters(['uiFrozen']),\r\n\t\t...mapState('machine/model', ['heat', 'tools']),\r\n\t\t...mapState('machine/settings', ['spindleRPM', 'temperatures']),\r\n\t\t...mapState('settings', ['disableAutoComplete']),\r\n\t\titems() {\r\n\t\t\tif (this.disableAutoComplete) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst key = this.active ? 'active' : 'standby';\r\n\t\t\tif (this.tool || this.all) {\r\n\t\t\t\treturn this.temperatures.tool[key];\r\n\t\t\t}\r\n\t\t\tif (this.bed) {\r\n\t\t\t\treturn this.temperatures.bed[key];\r\n\t\t\t}\r\n\t\t\tif (this.chamber) {\r\n\t\t\t\treturn this.temperatures.chamber;\r\n\t\t\t}\r\n\t\t\tif (this.spindle) {\r\n\t\t\t\treturn this.spindleRPM;\r\n\t\t\t}\r\n\r\n\t\t\tconsole.warn('[tool-input] Failed to retrieve temperature presets');\r\n\t\t\treturn [];\r\n\t\t},\r\n\t\tisValid() {\r\n\t\t\tif (this.all || this.spindle) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else if (this.tool && this.toolHeaterIndex >= 0 && this.toolHeaterIndex < this.tool.heaters.length) {\r\n\t\t\t\tconst heater = this.tool.heaters[this.toolHeaterIndex];\r\n\t\t\t\treturn (heater >= 0 && heater < this.heat.heaters.length && this.heat.heaters[heater] !== null);\r\n\t\t\t} else if (this.bed && this.bedIndex >= 0 && this.bedIndex < this.heat.heaters.length) {\r\n\t\t\t\treturn (this.heat.heaters[this.bedIndex] !== null);\r\n\t\t\t} else if (this.chamber && this.chamberIndex >= 0 && this.chamberIndex < this.heat.heaters.length) {\r\n\t\t\t\treturn (this.heat.heaters[this.chamberIndex] !== null);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t},\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tapplying: false,\r\n\t\t\tinput: null,\r\n\t\t\tactualValue: 0,\r\n\t\t\tvalue: 0\r\n\t\t}\r\n\t},\r\n\tprops: {\r\n\t\tlabel: String,\r\n\r\n\t\tall: Boolean,\r\n\t\tactive: Boolean,\r\n\t\tstandby: Boolean,\r\n\r\n\t\ttool: Object,\r\n\t\ttoolHeaterIndex: Number,\r\n\r\n\t\tspindle: Object,\r\n\t\tspindleIndex: Number,\r\n\r\n\t\tbed: Object,\r\n\t\tbedIndex: Number,\r\n\r\n\t\tchamber: Object,\r\n\t\tchamberIndex: Number\r\n\t},\r\n\tmethods: {\r\n\t\t...mapActions('machine', ['sendCode']),\r\n\t\tasync apply() {\r\n\t\t\tthis.$refs.input.isMenuActive = false;\t\t\t// FIXME There must be a better solution than this\r\n\r\n\t\t\tif (!this.isNumber(this.value)) {\r\n\t\t\t\tthis.$makeNotification('warning', this.$t('error.enterValidNumber'));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.applying) {\r\n\t\t\t\tthis.applying = true;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (this.spindle) {\r\n\t\t\t\t\t\t// Set Spindle RPM\r\n\t\t\t\t\t\tif (this.value >= 0) {\r\n\t\t\t\t\t\t\tthis.sendCode(`M3 P${this.spindleIndex} S${this.value}`);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.sendCode(`M4 P${this.spindleIndex} S${-this.value}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (this.value >= -273.15 && this.value <= 1999) {\r\n\t\t\t\t\t\tif (this.tool) {\r\n\t\t\t\t\t\t\t// Set tool temps\r\n\t\t\t\t\t\t\tconst currentTemps = this.tool[this.active ? 'active' : 'standby'];\r\n\t\t\t\t\t\t\tconst newTemps = currentTemps.map((temp, i) => (i === this.toolHeaterIndex) ? this.value : temp, this).join(':');\r\n\t\t\t\t\t\t\tawait this.sendCode(`G10 P${this.tool.number} ${this.active ? 'S' : 'R'}${newTemps}`);\r\n\t\t\t\t\t\t} else if (this.bed) {\r\n\t\t\t\t\t\t\t// Set bed temp\r\n\t\t\t\t\t\t\tawait this.sendCode(`M140 P${this.bedIndex} ${this.active ? 'S' : 'R'}${this.value}`);\r\n\t\t\t\t\t\t} else if (this.chamber) {\r\n\t\t\t\t\t\t\t// Set chamber temp\r\n\t\t\t\t\t\t\tawait this.sendCode(`M141 P${this.chamberIndex} ${this.active ? 'S' : 'R'}${this.value}`);\r\n\t\t\t\t\t\t} else if (this.all) {\r\n\t\t\t\t\t\t\t// Set all temps\r\n\t\t\t\t\t\t\tlet code = '';\r\n\t\t\t\t\t\t\tthis.tools.forEach(function(tool) {\r\n\t\t\t\t\t\t\t\tif (tool.heaters.length) {\r\n\t\t\t\t\t\t\t\t\tconst temps = tool.heaters.map(() => this.value, this).join(':');\r\n\t\t\t\t\t\t\t\t\tcode += `G10 P${tool.number} ${this.active ? 'S' : 'R'}${temps}\\n`;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t\t\tthis.heat.bedHeaters.forEach(function(bedHeater, bedIndex) {\r\n\t\t\t\t\t\t\t\tif (bedHeater >= 0 && bedHeater <= this.heat.heaters.length) {\r\n\t\t\t\t\t\t\t\t\tcode += `M140 P${bedIndex} ${this.active ? 'S' : 'R'}${this.value}\\n`;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t\t\tthis.heat.chamberHeaters.forEach(function(chamberHeater, chamberIndex) {\r\n\t\t\t\t\t\t\t\tif (chamberHeater >= 0 && chamberHeater <= this.heat.heaters.length) {\r\n\t\t\t\t\t\t\t\t\tcode += `M141 P${chamberIndex} ${this.active ? 'S' : 'R'}${this.value}\\n`;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t\t\tawait this.sendCode(code);\r\n\t\t\t\t\t\t\tthis.actualValue = this.value;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.warn('[tool-input] Invalid target for tool-input');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\t// should be handled before we get here\r\n\t\t\t\t\tconsole.warn(e);\r\n\t\t\t\t}\r\n\t\t\t\tthis.applying = false;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync change(value) {\r\n\t\t\t// Note that value is of type String when a user enters a value and then leaves it without confirming...\r\n\t\t\tif (typeof value === 'number') {\r\n\t\t\t\tawait this.apply();\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tmounted() {\r\n\t\tthis.input = this.$el.querySelector('input');\r\n\t\tif (this.tool) {\r\n\t\t\tthis.value = this.tool[this.active ? 'active' : 'standby'][this.toolHeaterIndex];\r\n\t\t} else if (this.bed) {\r\n\t\t\tthis.value = this.bed[this.active ? 'active' : 'standby'];\r\n\t\t} else if (this.chamber) {\r\n\t\t\tthis.value = this.chamber[this.active ? 'active' : 'standby'];\r\n\t\t} else if (this.spindle) {\r\n\t\t\tthis.value = this.spindle.active;\r\n\t\t}\r\n\t\tthis.actualValue = this.value;\r\n\t},\r\n\twatch: {\r\n\t\t'tool.active'(to) {\r\n\t\t\tconst val = (to instanceof Array) ? to[this.toolHeaterIndex] : to;\r\n\t\t\tif (this.active && this.actualValue !== val) {\r\n\t\t\t\tthis.actualValue = val;\r\n\t\t\t\tif (document.activeElement !== this.input) {\r\n\t\t\t\t\tthis.value = val;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t'tool.standby'(to) {\r\n\t\t\tconst val = (to instanceof Array) ? to[this.toolHeaterIndex] : to;\r\n\t\t\tif (this.standby && this.actualValue !== val) {\r\n\t\t\t\tthis.actualValue = val;\r\n\t\t\t\tif (document.activeElement !== this.input) {\r\n\t\t\t\t\tthis.value = val;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t'bed.active'(to) {\r\n\t\t\tif (this.active && this.actualValue !== to) {\r\n\t\t\t\tthis.actualValue = to;\r\n\t\t\t\tif (document.activeElement !== this.input) {\r\n\t\t\t\t\tthis.value = to;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t'bed.standby'(to) {\r\n\t\t\tif (this.standby && this.actualValue !== to) {\r\n\t\t\t\tthis.actualValue = to;\r\n\t\t\t\tif (document.activeElement !== this.input) {\r\n\t\t\t\t\tthis.value = to;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t'chamber.active'(to) {\r\n\t\t\tif (this.active && this.actualValue !== to) {\r\n\t\t\t\tthis.actualValue = to;\r\n\t\t\t\tif (document.activeElement !== this.input) {\r\n\t\t\t\t\tthis.value = to;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t'chamber.standby'(to) {\r\n\t\t\tif (this.standby && this.actualValue !== to) {\r\n\t\t\t\tthis.actualValue = to;\r\n\t\t\t\tif (document.activeElement !== this.input) {\r\n\t\t\t\t\tthis.value = to;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t'spindle.active'(to) {\r\n\t\t\tif (this.active && this.actualValue !== to) {\r\n\t\t\t\tthis.actualValue = to;\r\n\t\t\t\tif (document.activeElement !== this.input) {\r\n\t\t\t\t\tthis.value = to;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n</script>\r\n"]}]}