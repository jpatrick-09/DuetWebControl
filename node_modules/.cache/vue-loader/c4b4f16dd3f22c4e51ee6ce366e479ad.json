{"remainingRequest":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\components\\charts\\LayerChart.vue?vue&type=style&index=0&id=7f54bd82&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\components\\charts\\LayerChart.vue","mtime":1592248188513},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouY29udGVudCB7DQoJcG9zaXRpb246IHJlbGF0aXZlOw0KCW1pbi1oZWlnaHQ6IDE4MHB4Ow0KfQ0KDQouY29udGVudCA+IGNhbnZhcyB7DQoJcG9zaXRpb246IGFic29sdXRlOw0KfQ0K"},{"version":3,"sources":["LayerChart.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"LayerChart.vue","sourceRoot":"src/components/charts","sourcesContent":["<style scoped>\r\n.content {\r\n\tposition: relative;\r\n\tmin-height: 180px;\r\n}\r\n\r\n.content > canvas {\r\n\tposition: absolute;\r\n}\r\n</style>\r\n\r\n<template>\r\n\t<v-card class=\"d-flex flex-column flex-grow-1\">\r\n\t\t<v-card-title>\r\n\t\t\t<span>\r\n\t\t\t\t<v-icon small class=\"mr-1\">mdi-vector-polyline</v-icon> {{ $t('chart.layer.caption') }}\r\n\t\t\t</span>\r\n\t\t\t<v-spacer></v-spacer>\r\n\t\t\t<a v-show=\"job.layers.length > 30\" href=\"javascript:void(0)\" @click.prevent=\"showAllLayers = !showAllLayers\">\r\n\t\t\t\t{{ showAllLayers ? $t('chart.layer.showLastLayers', [30]) : $t('chart.layer.showAllLayers') }}\r\n\t\t\t</a>\r\n\t\t</v-card-title>\r\n\r\n\t\t<v-card-text class=\"content flex-grow-1 px-2 py-0\">\r\n\t\t\t<canvas ref=\"chart\"></canvas>\r\n\t\t</v-card-text>\r\n\t</v-card>\r\n</template>\r\n\r\n<script>\r\n'use strict'\r\n\r\nimport Chart from 'chart.js'\r\n\r\nimport { mapState } from 'vuex'\r\n\r\nimport { display, displayZ, displayTime } from '../../plugins/display.js'\r\n\r\nlet layers\r\n\r\nexport default {\r\n\tcomputed: {\r\n\t\t...mapState('machine/model', ['job']),\r\n\t\t...mapState('settings', ['darkTheme', 'language'])\r\n\t},\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tchart: null,\r\n\t\t\tshowAllLayers: false\r\n\t\t}\r\n\t},\r\n\tmethods: {\r\n\t\tupdateChart() {\r\n\t\t\tlayers = this.job.layers;\r\n\t\t\tthis.chart.data.labels = layers.map((dummy, index) => index + 1);\r\n\t\t\tthis.chart.data.datasets[0].data = layers.map(layer => layer.duration);\r\n\r\n\t\t\tif (this.showAllLayers) {\r\n\t\t\t\tthis.chart.config.options.scales.xAxes[0].ticks.min = 1;\r\n\t\t\t\tthis.chart.config.options.scales.xAxes[0].ticks.max = layers.length;\r\n\t\t\t} else {\r\n\t\t\t\tthis.chart.config.options.scales.xAxes[0].ticks.min = Math.max((layers.length > 2) ? 2 : 1, layers.length - 30);\r\n\t\t\t\tthis.chart.config.options.scales.xAxes[0].ticks.max = Math.max(30, layers.length);\r\n\t\t\t}\r\n\t\t\tthis.chart.update();\r\n\t\t},\r\n\t\tapplyDarkTheme(active) {\r\n\t\t\tconst ticksColor = active ? '#FFF' : '#666';\r\n\t\t\tthis.chart.config.options.scales.xAxes[0].ticks.minor.fontColor = ticksColor;\r\n\t\t\tthis.chart.config.options.scales.xAxes[0].ticks.major.fontColor = ticksColor;\r\n\t\t\tthis.chart.config.options.scales.yAxes[0].ticks.major.fontColor = ticksColor;\r\n\t\t\tthis.chart.config.options.scales.yAxes[0].ticks.minor.fontColor = ticksColor;\r\n\r\n\t\t\tconst gridLineColor = active ? 'rgba(255,255,255,0.15)' : 'rgba(0,0,0,0.15)';\r\n\t\t\tthis.chart.config.options.scales.xAxes[0].gridLines.color = gridLineColor;\r\n\t\t\tthis.chart.config.options.scales.yAxes[0].gridLines.color = gridLineColor;\r\n\t\t\tthis.chart.config.options.scales.yAxes[0].gridLines.zeroLineColor = gridLineColor;\r\n\r\n\t\t\tthis.chart.update();\r\n\t\t}\r\n\t},\r\n\tmounted() {\r\n\t\t// Create new chart options. Don't use data for the following because it should not be reactive\r\n\t\tconst that = this;\r\n\t\tthis.options = {\r\n\t\t\telements: {\r\n\t\t\t\tline: {\r\n\t\t\t\t\ttension: 0\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tlegend: {\r\n\t\t\t\tdisplay: false\r\n\t\t\t},\r\n\t\t\tmaintainAspectRatio: false,\r\n\t\t\tscales: {\r\n\t\t\t\txAxes: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tgridLines: {\r\n\t\t\t\t\t\t\tcolor: 'rgba(0,0,0,0.2)',\r\n\t\t\t\t\t\t\tdisplay: true\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tticks: {\r\n\t\t\t\t\t\t\tminor: {\r\n\t\t\t\t\t\t\t\tfontColor: 'rgba(0,0,0,0.87)',\r\n\t\t\t\t\t\t\t\tfontFamily: 'Roboto,sans-serif'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tmajor: {\r\n\t\t\t\t\t\t\t\tfontColor: 'rgba(0,0,0,0.87)',\r\n\t\t\t\t\t\t\t\tfontFamily: 'Roboto,sans-serif'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tbeginAtZero: true,\r\n\t\t\t\t\t\t\tmaxRotation: 0,\r\n\t\t\t\t\t\t\tstepSize: 5\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\tyAxes: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tgridLines: {\r\n\t\t\t\t\t\t\tcolor: 'rgba(0,0,0,0.87)',\r\n\t\t\t\t\t\t\tzeroLineColor: 'rgba(0,0,0,0.2)',\r\n\t\t\t\t\t\t\tdisplay: true\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tticks: {\r\n\t\t\t\t\t\t\tminor: {\r\n\t\t\t\t\t\t\t\tfontColor: 'rgba(0,0,0,0.87)',\r\n\t\t\t\t\t\t\t\tfontFamily: 'Roboto,sans-serif'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tmajor: {\r\n\t\t\t\t\t\t\t\tfontColor: 'rgba(0,0,0,0.87)',\r\n\t\t\t\t\t\t\t\tfontFamily: 'Roboto,sans-serif'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tbeginAtZero: true,\r\n\t\t\t\t\t\t\tsuggestedMax: 30,\r\n\t\t\t\t\t\t\tcallback: function(value) {\r\n\t\t\t\t\t\t\t\treturn displayTime(value, false);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\ttooltips: {\r\n\t\t\t\tdisplayColors: false,\r\n\t\t\t\tcallbacks: {\r\n\t\t\t\t\ttitle: tooltipItems => that.$t('chart.layer.layer', [tooltipItems[0].index + 1]),\r\n\t\t\t\t\tlabel(tooltipItem) {\r\n\t\t\t\t\t\tconst layer = layers[tooltipItem.index];\r\n\t\t\t\t\t\tlet result = [that.$t('chart.layer.layerDuration', [displayTime(layer.duration, false)])];\r\n\t\t\t\t\t\tif (layer.height) { result.push(that.$t('chart.layer.layerHeight', [displayZ(layer.height)])); }\r\n\t\t\t\t\t\tif (layer.filament) { result.push(that.$t('chart.layer.filamentUsage', [display(layer.filament, 1, 'mm')])); }\r\n\t\t\t\t\t\tif (layer.fractionPrinted) { result.push(that.$t('chart.layer.fractionPrinted', [display(layer.fractionPrinted * 100, 1, '%')])); }\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// panning and zooming is not supported until the panning feature of chartjs-plugin-zoom is fixed\r\n\t\t};\r\n\r\n\t\t// Create the chart\r\n\t\tthis.chart = Chart.Line(this.$refs.chart, {\r\n\t\t\toptions: this.options,\r\n\t\t\tdata: {\r\n\t\t\t\tdatasets: [{\r\n\t\t\t\t\tborderColor: 'rgba(0, 129, 214, 0.8)',\r\n\t\t\t\t\tbackgroundColor: 'rgba(0, 129, 214, 0.8)',\r\n\t\t\t\t\tfill: false,\r\n\t\t\t\t\tlabel: this.$t('chart.layer.layerTime')\r\n\t\t\t\t}]\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.applyDarkTheme(this.darkTheme);\r\n\t\tthis.updateChart();\r\n\t},\r\n\twatch: {\r\n\t\tdarkTheme(to) {\r\n\t\t\tthis.applyDarkTheme(to);\r\n\t\t},\r\n\t\tlanguage() {\r\n\t\t\tthis.chart.data.datasets[0].label = this.$t('chart.layer.layerTime');\r\n\t\t},\r\n\t\t'job.layers'() {\r\n\t\t\tthis.updateChart();\r\n\t\t},\r\n\t\tshowAllLayers() {\r\n\t\t\tthis.updateChart();\r\n\t\t}\r\n\t}\r\n}\r\n</script>\r\n"]}]}