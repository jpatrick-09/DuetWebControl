{"remainingRequest":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\components\\inputs\\CodeInput.vue?vue&type=style&index=0&id=0e543202&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\components\\inputs\\CodeInput.vue","mtime":1592248188531},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouZ3JvdyB7DQoJZmxleC1ncm93OiAxOw0KfQ0K"},{"version":3,"sources":["CodeInput.vue"],"names":[],"mappings":";AACA;AACA;AACA","file":"CodeInput.vue","sourceRoot":"src/components/inputs","sourcesContent":["<style scoped>\r\n.grow {\r\n\tflex-grow: 1;\r\n}\r\n</style>\r\n\r\n<template>\r\n\t<v-row class=\"component flex-shrink-1\" :class=\"{ 'mt-2' : solo, 'grow' : grow }\" no-gutters align=\"center\">\r\n\t\t<v-col>\r\n\t\t\t<v-combobox ref=\"input\" :solo=\"solo\" hide-details :disabled=\"uiFrozen\" :placeholder=\"$t('input.code.placeholder')\"\r\n\t\t\t\t\t\t:search-input.sync=\"code\" @click=\"click\" :loading=\"doingCode\" @keyup.enter=\"send\" @change=\"change\" @blur=\"wasFocused = showItems = false\"\r\n\t\t\t\t\t\t:items=\"displayedCodes\" @update:list-index=\"updateSelection\" @keyup.down=\"showItems = true\" @keyup.tab.exact=\"selectItem\" hide-selected>\r\n\t\t\t\t<template #item=\"{ item }\">\r\n\t\t\t\t\t<code>{{ item.text }}</code>\r\n\t\t\t\t\t<v-spacer></v-spacer>\r\n\t\t\t\t\t<v-btn icon @click.prevent.stop=\"removeCode(item.value)\">\r\n\t\t\t\t\t\t<v-icon>mdi-delete</v-icon>\r\n\t\t\t\t\t</v-btn>\r\n\t\t\t\t</template>\r\n\t\t\t</v-combobox>\r\n\t\t</v-col>\r\n\r\n\t\t<v-col class=\"ml-2 flex-shrink-1\" cols=\"auto\">\r\n\t\t\t<v-btn color=\"info\" :disabled=\"uiFrozen\" :loading=\"doingCode\" @click=\"doSend\">\r\n\t\t\t\t<v-icon class=\"mr-2\">mdi-send</v-icon> {{ $t('input.code.send') }} \r\n\t\t\t</v-btn>\r\n\t\t</v-col>\r\n\t</v-row>\r\n</template>\r\n\r\n<script>\r\n'use strict'\r\n\r\nimport { mapState, mapGetters, mapActions, mapMutations } from 'vuex'\r\n\r\nconst conditionalKeywords = ['abort', 'echo', 'if', 'elif', 'else', 'while', 'break', 'var', 'set'];\r\n\r\nexport default {\r\n\tcomputed: {\r\n\t\t...mapGetters(['uiFrozen']),\r\n\t\t...mapState('machine/settings', ['codes']),\r\n\t\t...mapState('settings', ['disableAutoComplete']),\r\n\t\tdisplayedCodes() {\r\n\t\t\tif (this.showItems && !this.disableAutoComplete) {\r\n\t\t\t\tconst currentCode = this.code ? this.code.toLowerCase() : '';\r\n\t\t\t\treturn this.codes\r\n\t\t\t\t\t.filter(code => (currentCode === '') || (code.toLowerCase().indexOf(currentCode) !== -1))\r\n\t\t\t\t\t.map(code => ({ text: code, value: code }));\r\n\t\t\t}\r\n\t\t\treturn [];\r\n\t\t}\r\n\t},\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tcode: '',\r\n\t\t\twasFocused: false,\r\n\t\t\tshowItems: false,\r\n\t\t\tselectedItem: '',\r\n\t\t\tsendPending: false,\r\n\t\t\tdoingCode: false\r\n\t\t}\r\n\t},\r\n\tprops: {\r\n\t\tgrow: Boolean,\r\n\t\tsolo: Boolean\r\n\t},\r\n\tmethods: {\r\n\t\t...mapActions('machine', ['sendCode']),\r\n\t\t...mapMutations('machine/settings', ['addCode', 'removeCode']),\r\n\t\tclick() {\r\n\t\t\tif (this.wasFocused) {\r\n\t\t\t\tthis.showItems = !this.showItems;\r\n\t\t\t} else {\r\n\t\t\t\tthis.wasFocused = true;\r\n\t\t\t}\r\n\t\t},\r\n\t\tupdateSelection(selection) {\r\n\t\t\tif (selection instanceof Array) {\r\n\t\t\t\tselection = (selection.length > 0) ? selection[0] : -1;\r\n\t\t\t}\r\n\r\n\t\t\tconst items = this.displayedCodes;\r\n\t\t\tif (selection >= 0 && selection < items.length) {\r\n\t\t\t\tthis.selectedItem = items[selection].value;\r\n\t\t\t} else {\r\n\t\t\t\tthis.selectedItem = '';\r\n\t\t\t}\r\n\t\t},\r\n\t\tselectItem(e) {\r\n\t\t\tif (this.selectedItem !== '') {\r\n\t\t\t\tthis.code = this.selectedItem;\r\n\t\t\t\tthis.showItems = false;\r\n\t\t\t\te.preventDefault();\r\n\t\t\t}\r\n\t\t},\r\n\t\tchange(value) {\r\n\t\t\tif (value && !(value instanceof String)) {\r\n\t\t\t\tthis.code = value.value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tdoSend() {\r\n\t\t\tif (this.$refs.input.isMenuActive) {\r\n\t\t\t\tthis.$refs.input.isMenuActive = false;\t\t// FIXME There must be a better solution than this\r\n\t\t\t\tthis.sendPending = true;\r\n\t\t\t} else {\r\n\t\t\t\tthis.send();\r\n\t\t\t}\r\n\t\t},\r\n\t\thasUnprecedentedParameters: (code) => !code || /(M23|M28|M30|M32|M36|M117)[^0-9]/i.test(code),\r\n\t\tasync send() {\r\n\t\t\tthis.$refs.input.isMenuActive = false;\t\t\t// FIXME There must be a better solution than this\r\n\r\n\t\t\tconst code = (this.code.constructor === String) ? this.code : this.code.value;\r\n\t\t\tif (code && code.trim() !== '' && !this.doingCode) {\r\n\t\t\t\tlet codeToSend = '', bareCode = '', inQuotes = false, inExpression = false, inWhiteSpace = false, inComment = false;\r\n\t\t\t\tif (!this.hasUnprecedentedParameters(codeToSend) &&\r\n\t\t\t\t\t!conditionalKeywords.some(keyword => code.trim().startsWith(keyword))) {\r\n\t\t\t\t\t// Convert code to upper-case and remove comments\r\n\t\t\t\t\tfor (let i = 0; i < code.length; i++) {\r\n\t\t\t\t\t\tconst char = code[i];\r\n\t\t\t\t\t\tif (inQuotes) {\r\n\t\t\t\t\t\t\tif (i < code.length - 1 && char === '\\\\' && code[i + 1] === '\"') {\r\n\t\t\t\t\t\t\t\tcodeToSend += '\\\\\"';\r\n\t\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (char === '\"') {\r\n\t\t\t\t\t\t\t\t\tinQuotes = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tcodeToSend += char;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (inExpression) {\r\n\t\t\t\t\t\t\tcodeToSend += char;\r\n\t\t\t\t\t\t\tinExpression = (char !== '}');\r\n\t\t\t\t\t\t} else if (inComment) {\r\n\t\t\t\t\t\t\tcodeToSend += char;\r\n\t\t\t\t\t\t\tinComment = (char !== ')');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (char === '\"') {\r\n\t\t\t\t\t\t\t\t// don't convert escaped strings\r\n\t\t\t\t\t\t\t\tinQuotes = true;\r\n\t\t\t\t\t\t\t} else if (char === ' ' || char === '\\t') {\r\n\t\t\t\t\t\t\t\t// remove duplicate white spaces\r\n\t\t\t\t\t\t\t\tif (inWhiteSpace) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tinWhiteSpace = true;\r\n\t\t\t\t\t\t\t} else if (char === ';') {\r\n\t\t\t\t\t\t\t\t// stop when final comments start\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t} else if (char === '(') {\r\n\t\t\t\t\t\t\t\t// don't process chars from encapsulated comments\r\n\t\t\t\t\t\t\t\tinComment = true;\r\n\t\t\t\t\t\t\t} else if (char === '{') {\r\n\t\t\t\t\t\t\t\t// don't process chars from expressions\r\n\t\t\t\t\t\t\t\tinExpression = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tinWhiteSpace = false;\r\n\t\t\t\t\t\t\tcodeToSend += char.toUpperCase();\r\n\t\t\t\t\t\t\tbareCode += code.toUpperCase();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Don't modify the user input\r\n\t\t\t\t\tcodeToSend = code;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Send the code and wait for completion\r\n\t\t\t\tthis.doingCode = true;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst reply = await this.sendCode({ code: codeToSend, fromInput: true });\r\n\t\t\t\t\tif (!inQuotes && !reply.startsWith('Error: ') && !reply.startsWith('Warning: ') &&\r\n\t\t\t\t\t\tbareCode.indexOf('M587') === -1 && bareCode.indexOf('M589') === -1 &&\r\n\t\t\t\t\t\t!this.disableAutoComplete && this.codes.indexOf(codeToSend.trim()) === -1) {\r\n\t\t\t\t\t\t// Automatically remember successful codes\r\n\t\t\t\t\t\tthis.addCode(codeToSend.trim());\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch {\r\n\t\t\t\t\t// handled before we get here\r\n\t\t\t\t}\r\n\t\t\t\tthis.doingCode = false;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\twatch: {\r\n\t\tcode(to) {\r\n\t\t\tif (to && to.length >= 2) {\r\n\t\t\t\tthis.showItems = true;\r\n\t\t\t}\r\n\t\t},\r\n\t\tuiFrozen(to) {\r\n\t\t\tif (to) {\r\n\t\t\t\t// Clear input when the UI is frozen\r\n\t\t\t\tthis.code = '';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n</script>\r\n"]}]}