{"remainingRequest":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\components\\lists\\BaseFileList.vue?vue&type=style&index=0&id=6769f734&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\src\\components\\lists\\BaseFileList.vue","mtime":1592248188537},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jpatrick\\Documents\\GitHub\\DuetWebControl_Fork\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQp0ZCB7DQoJY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQoubG9hZGluZy1jdXJzb3Igew0KCWN1cnNvcjogd2FpdDsNCn0NCi5sb2FkaW5nLWN1cnNvciB0ZCB7DQoJY3Vyc29yOiB3YWl0Ow0KfQ0K"},{"version":3,"sources":["BaseFileList.vue"],"names":[],"mappings":";AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"BaseFileList.vue","sourceRoot":"src/components/lists","sourcesContent":["<style scoped>\r\ntd {\r\n\tcursor: pointer;\r\n}\r\n\r\n.loading-cursor {\r\n\tcursor: wait;\r\n}\r\n.loading-cursor td {\r\n\tcursor: wait;\r\n}\r\n</style>\r\n\r\n<style>\r\n.base-file-list th {\r\n\twhite-space: nowrap;\r\n}\r\n</style>\r\n\r\n<template>\r\n\t<div>\r\n\t\t<v-data-table v-model=\"innerValue\" v-bind=\"$props\"\r\n\t\t\t:items=\"innerFilelist\" item-key=\"name\" :headers=\"headers || defaultHeaders\" show-select \r\n\t\t\t:loading=\"loading || innerLoading\"\r\n\t\t\t:custom-sort=\"sort\" :sort-by.sync=\"internalSortBy\" :sort-desc.sync=\"internalSortDesc\" must-sort\r\n\t\t\tdisable-pagination hide-default-footer :mobile-breakpoint=\"0\"\r\n\t\t\tclass=\"base-file-list elevation-3\" :class=\"{ 'empty-table-fix' : !innerFilelist.length, 'loading-cursor' : isLoading }\">\r\n\r\n\t\t\t<template #progress>\r\n\t\t\t\t<slot name=\"progress\">\r\n\t\t\t\t\t<v-progress-linear indeterminate></v-progress-linear>\r\n\t\t\t\t</slot>\r\n\t\t\t</template>\r\n\r\n\t\t\t<template #no-data>\r\n\t\t\t\t<slot name=\"no-data\">\r\n\t\t\t\t\t<v-alert :value=\"true\" type=\"info\" class=\"text-left ma-0\" @contextmenu.prevent=\"\">\r\n\t\t\t\t\t\t{{ $t(noItemsText) }}\r\n\t\t\t\t\t</v-alert>\r\n\t\t\t\t</slot>\r\n\t\t\t</template>\r\n\r\n\t\t\t<template #item=\"props\">\r\n\t\t\t\t<tr v-ripple :active=\"props.isSelected\" @keydown.space.prevent=\"props.select(!props.isSelected)\"\r\n\t\t\t\t\t@touchstart=\"onItemTouchStart(props, $event)\" @touchend=\"onItemTouchEnd\"\r\n\t\t\t\t\t@click=\"onItemClick(props)\" @keydown.enter.prevent=\"onItemClick(props)\"\r\n\t\t\t\t\t@contextmenu.prevent=\"onItemContextmenu(props, $event)\" @keydown.escape.prevent=\"contextMenu.shown = false\"\r\n\t\t\t\t\t@dragstart=\"onItemDragStart(props.item, $event)\" @dragover=\"onItemDragOver(props.item, $event)\" @drop.prevent=\"onItemDragDrop(props.item, $event)\"\r\n\t\t\t\t\t:data-filename=\"(props.item.isDirectory ? '*' : '') + props.item.name\" draggable=\"true\" tabindex=\"0\">\r\n\r\n\t\t\t\t\t<td v-for=\"header in props.headers\" :key=\"header.value\" :class=\"{ 'pr-0': header.value === 'data-table-select' }\">\r\n\t\t\t\t\t\t<template v-if=\"header.value === 'data-table-select'\">\r\n\t\t\t\t\t\t\t<v-checkbox :input-value=\"props.isSelected\" @touchstart.stop=\"\" @touchend.stop=\"\" @click.stop.prevent=\"props.select(!props.isSelected)\" primary hide-details class=\"mt-n1\" tabindex=\"-1\"></v-checkbox>\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t\t<template v-else-if=\"header.value === 'name'\">\r\n\t\t\t\t\t\t\t<div class=\"d-inline-flex align-center\">\r\n\t\t\t\t\t\t\t\t<slot :name=\"`${props.item.isDirectory ? 'folder' : 'file'}.${props.item.name}`\">\r\n\t\t\t\t\t\t\t\t\t<v-icon class=\"mr-1\">{{ props.item.isDirectory ? folderIcon : fileIcon }}</v-icon> {{ props.item.name }}\r\n\t\t\t\t\t\t\t\t</slot>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t\t<template v-else-if=\"header.unit === 'bytes'\">\r\n\t\t\t\t\t\t\t{{ (props.item[header.value] !== null) ? $displaySize(props.item[header.value]) : '' }}\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t\t<template v-else-if=\"header.unit === 'date'\">\r\n\t\t\t\t\t\t\t{{ props.item.lastModified ? props.item.lastModified.toLocaleString() : $t('generic.noValue') }}\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t\t<template v-else-if=\"header.unit === 'filaments'\">\r\n\t\t\t\t\t\t\t<v-tooltip bottom :disabled=\"!props.item[header.value] || props.item[header.value].length <= 1\">\r\n\t\t\t\t\t\t\t\t<template #activator=\"{ on }\">\r\n\t\t\t\t\t\t\t\t\t<span v-on=\"on\">\r\n\t\t\t\t\t\t\t\t\t\t{{ displayLoadingValue(props.item, header.value, 1, 'mm') }}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</template>\r\n\r\n\t\t\t\t\t\t\t\t{{ $display(props.item[header.value], 1, 'mm') }}\r\n\t\t\t\t\t\t\t</v-tooltip>\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t\t<template v-else-if=\"header.unit === 'time'\">\r\n\t\t\t\t\t\t\t{{ displayTimeValue(props.item, header.value) }}\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t\t<template v-else>\r\n\t\t\t\t\t\t\t{{ displayLoadingValue(props.item, header.value, header.precision, header.unit) }}\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</template>\r\n\t\t</v-data-table>\r\n\r\n\t\t<v-menu v-model=\"contextMenu.shown\" :position-x=\"contextMenu.x\" :position-y=\"contextMenu.y\" absolute offset-y>\r\n\t\t\t<v-list>\r\n\t\t\t\t<slot name=\"context-menu\"></slot>\r\n\r\n\t\t\t\t<v-list-item v-show=\"!noDownload && innerValue.length === 1 && filesSelected\" @click=\"download\">\r\n\t\t\t\t\t<v-icon class=\"mr-1\">mdi-cloud-download</v-icon> {{ $tc('list.baseFileList.download', innerValue.length) }}\r\n\t\t\t\t</v-list-item>\r\n\t\t\t\t<v-list-item v-show=\"!noEdit && innerValue.length === 1 && filesSelected\" :disabled=\"!canEditFile\" @click=\"edit(innerValue[0])\">\r\n\t\t\t\t\t<v-icon class=\"mr-1\">mdi-file-document-edit</v-icon> {{ $t('list.baseFileList.edit') }}\r\n\t\t\t\t</v-list-item>\r\n\t\t\t\t<v-list-item v-show=\"!noRename && innerValue.length === 1\" @click=\"rename\">\r\n\t\t\t\t\t<v-icon class=\"mr-1\">mdi-rename-box</v-icon> {{ $t('list.baseFileList.rename') }}\r\n\t\t\t\t</v-list-item>\r\n\t\t\t\t<v-list-item v-show=\"!noDelete\" @click=\"remove\">\r\n\t\t\t\t\t<v-icon class=\"mr-1\">mdi-delete</v-icon> {{ $t('list.baseFileList.delete') }}\r\n\t\t\t\t</v-list-item>\r\n\t\t\t\t<v-list-item v-show=\"!foldersSelected && innerValue.length > 1\" @click=\"downloadZIP\">\r\n\t\t\t\t\t<v-icon class=\"mr-1\">mdi-package-down</v-icon> {{ $t('list.baseFileList.downloadZIP') }}\r\n\t\t\t\t</v-list-item>\r\n\t\t\t</v-list>\r\n\t\t</v-menu>\r\n\r\n\t\t<file-edit-dialog :shown.sync=\"editDialog.shown\" :filename=\"editDialog.filename\" v-model=\"editDialog.content\" @editComplete=\"$emit('fileEdited', $event)\"></file-edit-dialog>\r\n\t\t<input-dialog :shown.sync=\"renameDialog.shown\" :title=\"$t('dialog.renameFile.title')\" :prompt=\"$t('dialog.renameFile.prompt')\" :preset=\"renameDialog.item && renameDialog.item.name\" @confirmed=\"renameCallback\"></input-dialog>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n'use strict'\r\n\r\nimport JSZip from 'jszip'\r\nimport saveAs from 'file-saver'\r\nimport { VDataTable } from 'vuetify/lib'\r\n\r\nimport Vue from 'vue'\r\nimport { mapState, mapGetters, mapActions, mapMutations } from 'vuex'\r\n\r\nimport i18n from '../../i18n'\r\nimport { defaultMachine, getModifiedDirectories } from '../../store/machine'\r\nimport { DisconnectedError, OperationCancelledError } from '../../utils/errors.js'\r\nimport Path from '../../utils/path.js'\r\n\r\nconst maxEditFileSize = 15728640;\t\t// 15 MiB\r\n\r\nexport default {\r\n\tprops: {\r\n\t\theaders: Array,\r\n\t\tsortTable: String,\r\n\t\tdirectory: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: true\r\n\t\t},\r\n\t\tfilelist: Array,\r\n\t\tvalue: Array,\r\n\t\tfileIcon: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: 'mdi-file'\r\n\t\t},\r\n\t\tfolderIcon: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: 'mdi-folder'\r\n\t\t},\r\n\t\tloading: Boolean,\r\n\t\tdoingFileOperation: Boolean,\r\n\t\tnoDragDrop: Boolean,\r\n\t\tnoDownload: Boolean,\r\n\t\tnoEdit: Boolean,\r\n\t\tnoFilesText:\r\n\t\t{\r\n\t\t\ttype: String,\r\n\t\t\tdefault: ''\r\n\t\t},\r\n\t\tnoRename: Boolean,\r\n\t\tnoDelete: Boolean\r\n\t},\r\n\tcomputed: {\r\n\t\t...mapState(['selectedMachine']),\r\n\t\t...mapGetters(['isConnected']),\r\n\t\t...mapState('machine', ['isReconnecting']),\r\n\t\t...mapState('machine/cache', ['sorting']),\r\n\t\t...mapState('machine/model', ['volumes']),\r\n\t\tdefaultHeaders() {\r\n\t\t\treturn [\r\n\t\t\t\t{\r\n\t\t\t\t\ttext: i18n.t('list.baseFileList.fileName'),\r\n\t\t\t\t\tvalue: 'name'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttext: i18n.t('list.baseFileList.size'),\r\n\t\t\t\t\tvalue: 'size',\r\n\t\t\t\t\tunit: 'bytes'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttext: i18n.t('list.baseFileList.lastModified'),\r\n\t\t\t\t\tvalue: 'lastModified',\r\n\t\t\t\t\tunit: 'date'\r\n\t\t\t\t}\r\n\t\t\t];\r\n\t\t},\r\n\t\tisLoading() {\r\n\t\t\treturn this.loading || this.innerLoading || this.doingFileOperation || this.innerDoingFileOperation;\r\n\t\t},\r\n\t\tfoldersSelected() {\r\n\t\t\treturn this.innerValue.some(item => item.isDirectory)\r\n\t\t},\r\n\t\tfilesSelected() {\r\n\t\t\treturn this.innerValue.some(item => !item.isDirectory)\r\n\t\t},\r\n\t\tcanEditFile() {\r\n\t\t\treturn (this.innerValue.length > 0) && (this.innerValue[0].size < maxEditFileSize);\r\n\t\t},\r\n\t\tnoItemsText() {\r\n\t\t\tif (this.selectedMachine === defaultMachine) {\r\n\t\t\t\treturn this.noFilesText;\r\n\t\t\t}\r\n\t\t\tconst volume = Path.getVolume(this.innerDirectory);\r\n\t\t\treturn (volume >= 0 && volume < this.volumes.length && this.volumes[volume].mounted) ? this.noFilesText : 'list.baseFileList.driveUnmounted';\r\n\t\t},\r\n\t\tinternalSortBy: {\r\n\t\t\tget() { return this.sorting[this.sortTable].column; },\r\n\t\t\tset(value) {\r\n\t\t\t\tthis.setSorting({ table: this.sortTable, column: value, descending: this.internalSortDesc });\r\n\t\t\t}\r\n\t\t},\r\n\t\tinternalSortDesc: {\r\n\t\t\tget() { return this.sorting[this.sortTable].descending; },\r\n\t\t\tset(value) {\r\n\t\t\t\tthis.setSorting({ table: this.sortTable, column: this.internalSortBy, descending: value });\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tunsubscribe: undefined,\r\n\t\t\twasMounted: false,\r\n\t\t\tinitialDirectory: this.directory,\r\n\t\t\tinnerDirectory: this.directory,\r\n\t\t\tinnerFilelist: [],\r\n\t\t\tinnerLoading: false,\r\n\t\t\tinnerDoingFileOperation: false,\r\n\t\t\tinnerValue: [],\r\n\t\t\tprevSelection: [],\r\n\t\t\tcontextMenu: {\r\n\t\t\t\tshown: false,\r\n\t\t\t\ttouchTimer: undefined,\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0\r\n\t\t\t},\r\n\t\t\teditDialog: {\r\n\t\t\t\tshown: false,\r\n\t\t\t\tfilename: '',\r\n\t\t\t\tcontent: ''\r\n\t\t\t},\r\n\t\t\trenameDialog: {\r\n\t\t\t\tshown: false,\r\n\t\t\t\tdirectory: '',\r\n\t\t\t\titem: null\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\textends: VDataTable,\r\n\tmethods: {\r\n\t\t...mapActions('machine', {\r\n\t\t\tmachineDownload: 'download',\r\n\t\t\tmachineMove: 'move',\r\n\t\t\tmachineDelete: 'delete',\r\n\t\t\tgetFileList: 'getFileList'\r\n\t\t}),\r\n\t\t...mapMutations('machine/cache', ['setSorting']),\r\n\t\ttoggleAll() {\r\n\t\t\tthis.innerValue = this.innerValue.length ? [] : this.innerFilelist.slice();\r\n\t\t},\r\n\t\tsort(items, sortBy, sortDesc) {\r\n\t\t\tsortBy = sortBy.length ? sortBy[0] : 'name';\r\n\t\t\tsortDesc = sortDesc[0];\r\n\r\n\t\t\t// Sort by index\r\n\t\t\titems.sort(function(a, b) {\r\n\t\t\t\tif (a[sortBy] === b[sortBy]) {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t\tif (a[sortBy] === null || a[sortBy] === undefined) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\tif (b[sortBy] === null || b[sortBy] === undefined) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\tif (a[sortBy].constructor === String && b[sortBy].constructor === String) {\r\n\t\t\t\t\treturn a[sortBy].localeCompare(b[sortBy], undefined, { sensivity: 'base' });\r\n\t\t\t\t}\r\n\t\t\t\tif (a[sortBy] instanceof Array && b[sortBy] instanceof Array) {\r\n\t\t\t\t\tconst reducedA = a[sortBy].length ? a.filament.reduce((a, b) => a + b) : 0;\r\n\t\t\t\t\tconst reducedB = b[sortBy].length ? b.filament.reduce((a, b) => a + b) : 0;\r\n\t\t\t\t\treturn reducedA - reducedB;\r\n\t\t\t\t}\r\n\t\t\t\treturn a[sortBy] - b[sortBy];\r\n\t\t\t});\r\n\r\n\t\t\t// Deal with descending order\r\n\t\t\tif (sortDesc) {\r\n\t\t\t\titems.reverse();\r\n\t\t\t}\r\n\r\n\t\t\t// Then make sure directories come first\r\n\t\t\titems.sort((a, b) => (a.isDirectory === b.isDirectory) ? 0 : (a.isDirectory ? -1 : 1));\r\n\t\t\treturn items;\r\n\t\t},\r\n\t\tasync refresh() {\r\n\t\t\tawait this.loadDirectory(this.innerDirectory);\r\n\t\t},\r\n\t\tasync loadDirectory(directory) {\r\n\t\t\tif (!this.isConnected) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Update our path even if we're still busy loading\r\n\t\t\tthis.innerDirectory = directory;\r\n\t\t\tif (this.innerLoading) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Make sure the current volume is actually available\r\n\t\t\tconst volume = Path.getVolume(this.innerDirectory);\r\n\t\t\tif (volume < 0 || volume >= this.volumes.length || !this.volumes[volume].mounted) {\r\n\t\t\t\tthis.innerDirectory = (volume === 0) ? this.initialDirectory : `${volume}:`;\r\n\t\t\t\tthis.innerFilelist = [];\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Load file list\r\n\t\t\tthis.innerLoading = true;\r\n\t\t\ttry {\r\n\t\t\t\tconst files = await this.getFileList(directory);\r\n\r\n\t\t\t\t// Create missing props if required\r\n\t\t\t\tif (this.headers) {\r\n\t\t\t\t\tfiles.forEach(function(item) {\r\n\t\t\t\t\t\tthis.headers.forEach(function(header) {\r\n\t\t\t\t\t\t\tif (item[header.value] === undefined) {\r\n\t\t\t\t\t\t\t\tVue.set(item, header.value, undefined);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check if another directory was requested while files were being loaded\r\n\t\t\t\tif (directory !== this.innerDirectory) {\r\n\t\t\t\t\tthis.innerLoading = false;\r\n\t\t\t\t\tthis.loadDirectory(this.innerDirectory);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Assign new file list\r\n\t\t\t\tthis.innerFilelist = files;\r\n\t\t\t\tthis.innerValue = [];\r\n\t\t\t\tthis.$nextTick(function() {\r\n\t\t\t\t\tthis.$emit('directoryLoaded', directory);\r\n\t\t\t\t});\r\n\t\t\t} catch (e) {\r\n\t\t\t\tif (!(e instanceof DisconnectedError)) {\r\n\t\t\t\t\tconsole.warn(e);\r\n\t\t\t\t\tthis.$makeNotification('error', this.$t('error.filelistRequestFailed'), e.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.innerLoading = false;\r\n\t\t},\r\n\t\tdisplayLoadingValue(item, prop, precision, unit = '') {\r\n\t\t\tif (item.isDirectory) {\r\n\t\t\t\treturn '';\r\n\t\t\t}\r\n\t\t\tif (!item[prop]) {\r\n\t\t\t\treturn this.$t((item[prop] === undefined) ? 'generic.loading' : 'generic.noValue');\r\n\t\t\t}\r\n\r\n\t\t\tlet displayValue;\r\n\t\t\tif (item[prop] instanceof Array) {\r\n\t\t\t\tif (!item[prop].length) {\r\n\t\t\t\t\treturn this.$t('generic.noValue');\r\n\t\t\t\t}\r\n\t\t\t\tdisplayValue = item[prop].reduce((a, b) => a + b);\r\n\t\t\t} else {\r\n\t\t\t\tdisplayValue = item[prop];\r\n\t\t\t}\r\n\r\n\t\t\tif (precision !== undefined) {\r\n\t\t\t\tdisplayValue = displayValue.toFixed(precision);\r\n\t\t\t}\r\n\t\t\treturn `${displayValue} ${unit}`;\r\n\t\t},\r\n\t\tdisplayTimeValue(item, prop) {\r\n\t\t\tif (item.isDirectory) {\r\n\t\t\t\treturn '';\r\n\t\t\t}\r\n\t\t\treturn (item[prop] !== null) ? this.$displayTime(item[prop]) : this.$t('generic.noValue');\r\n\t\t},\r\n\t\tonItemTouchStart(props, e) {\r\n\t\t\tconst that = this;\r\n\t\t\tthis.contextMenu.touchTimer = setTimeout(function() {\r\n\t\t\t\tthat.contextMenu.touchTimer = undefined;\r\n\t\t\t\tthat.onItemContextmenu(props, { clientX: e.targetTouches[0].clientX, clientY: e.targetTouches[0].clientY });\r\n\t\t\t}, 1000);\r\n\t\t},\r\n\t\tonItemTouchEnd() {\r\n\t\t\tif (this.contextMenu.touchTimer) {\r\n\t\t\t\tclearTimeout(this.contextMenu.touchTimer);\r\n\t\t\t\tthis.contextMenu.touchTimer = undefined;\r\n\t\t\t}\r\n\t\t},\r\n\t\tonItemClick(props) {\r\n\t\t\tif (props.item.isDirectory) {\r\n\t\t\t\tthis.loadDirectory(Path.combine(this.innerDirectory, props.item.name));\r\n\t\t\t} else {\r\n\t\t\t\tthis.$emit('fileClicked', props.item);\r\n\t\t\t}\r\n\t\t},\r\n\t\tonItemContextmenu(props, e) {\r\n\t\t\tif (this.contextMenu.shown) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.onItemTouchEnd();\r\n\r\n\t\t\t// Deal with selection\r\n\t\t\tthis.prevSelection = this.innerValue;\r\n\t\t\tif (!props.isSelected) {\r\n\t\t\t\tthis.innerValue = [];\r\n\t\t\t\tthis.$nextTick(() => props.select(true));\r\n\t\t\t}\r\n\r\n\t\t\t// Open the context menu\r\n\t\t\tthis.contextMenu.shown = false;\r\n\t\t\tthis.contextMenu.x = e.clientX;\r\n\t\t\tthis.contextMenu.y = e.clientY;\r\n\t\t\tthis.$nextTick(() => {\r\n\t\t\t\tthis.contextMenu.shown = true;\r\n\t\t\t});\r\n\t\t},\r\n\t\tonItemDragStart(item, e) {\r\n\t\t\tif (this.noDragDrop || this.contextMenu.touchTimer || this.contextMenu.shown) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst itemsToDrag = this.innerValue;\r\n\t\t\tif (itemsToDrag.indexOf(item) === -1) {\r\n\t\t\t\titemsToDrag.push(item);\r\n\t\t\t}\r\n\t\t\te.dataTransfer.setData('application/json', JSON.stringify({\r\n\t\t\t\ttype: 'dwcFiles',\r\n\t\t\t\tdirectory: this.innerDirectory,\r\n\t\t\t\titems: itemsToDrag\r\n\t\t\t}));\r\n\t\t\te.dataTransfer.effectAllowed = 'move';\r\n\r\n\t\t\tconst table = this.$el.querySelector('table'), firstRow = table.tBodies[0].rows[0];\r\n\t\t\tconst tableClone = table.cloneNode(true), itemFilename = (item.isDirectory ? '*' : '') + item.name;\r\n\t\t\tlet offsetY = 0, countingOffset = true;\r\n\r\n\t\t\ttableClone.tHead.remove();\r\n\t\t\tArray.from(tableClone.tBodies[0].rows).forEach(function(row) {\r\n\t\t\t\tconst filename = row.dataset.filename;\r\n\t\t\t\tif (itemsToDrag.some(item => (item.isDirectory ? '*' : '') + item.name === filename)) {\r\n\t\t\t\t\tArray.from(row.children).forEach(function(td, index) {\r\n\t\t\t\t\t\tif (td.tagName === 'TD') {\r\n\t\t\t\t\t\t\ttd.style.width = `${firstRow.children[index].offsetWidth}px`;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttd.remove();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (countingOffset) {\r\n\t\t\t\t\t\tif (filename === itemFilename) {\r\n\t\t\t\t\t\t\tcountingOffset = false;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\toffsetY += firstRow.offsetHeight;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\trow.remove();\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\ttableClone.style.backgroundColor = this.$vuetify.theme.isDark ? '#424242' : '#FFFFFF';\r\n\t\t\ttableClone.style.opacity = 0.7;\r\n\t\t\ttableClone.style.position = 'absolute';\r\n\t\t\ttableClone.style.pointerEvents = 'none';\r\n\t\t\tArray.from(tableClone.querySelectorAll('[class^=\"v-ripple\"]')).forEach(function(item) {\r\n\t\t\t\titem.classList = Array.from(item.classList).filter(c => !c.startsWith('v-ripple'));\r\n\t\t\t});\r\n\t\t\ttable.parentNode.append(tableClone);\r\n\r\n\t\t\tconst x = e.clientX - table.getClientRects()[0].left;\r\n\t\t\tconst y = e.clientY - e.target.closest('tr').getClientRects()[0].top + offsetY;\r\n\t\t\te.dataTransfer.setDragImage(tableClone, x, y);\r\n\r\n\t\t\tsetTimeout(() => tableClone.remove(), 0);\r\n\t\t},\r\n\t\tonItemDragOver(item, e) {\r\n\t\t\tif (!this.noDragDrop && item.isDirectory) {\r\n\t\t\t\tconst jsonData = e.dataTransfer.getData('application/json');\r\n\t\t\t\tif (jsonData) {\r\n\t\t\t\t\tconst data = JSON.parse(jsonData);\r\n\t\t\t\t\tif (data.type === 'dwcFiles' && !data.items.some(dataItem => dataItem.isDirectory && dataItem.name === item.name)) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Fix for Chrome: It does not grant access to dataTransfer on the same domain \"for security reasons\"...\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync onItemDragDrop(item, e) {\r\n\t\t\tconst jsonData = e.dataTransfer.getData('application/json');\r\n\t\t\tif (jsonData) {\r\n\t\t\t\tconst data = JSON.parse(jsonData);\r\n\t\t\t\tif (data.type === 'dwcFiles' && !data.items.some(dataItem => dataItem.isDirectory && dataItem.name === item.name)) {\r\n\t\t\t\t\tconst directory = this.innerDirectory;\r\n\t\t\t\t\tfor (let i = 0; i < data.items.length; i++) {\r\n\t\t\t\t\t\tconst from = Path.combine(data.directory, data.items[i].name);\r\n\t\t\t\t\t\tconst to = Path.combine(directory, item.name, data.items[i].name);\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tawait this.machineMove({ from, to });\r\n\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\tthis.$makeNotification('error', `Failed to move ${data.items[i].name} to ${directory}`, e.message);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync download(item) {\r\n\t\t\ttry {\r\n\t\t\t\tconst filename = (item && item.name) ? item.name : this.innerValue[0].name;\r\n\t\t\t\tconst blob = await this.machineDownload({ filename: Path.combine(this.innerDirectory, filename), type: 'blob' });\r\n\t\t\t\tsaveAs(blob, filename);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tif (!(e instanceof DisconnectedError) && !(e instanceof OperationCancelledError)) {\r\n\t\t\t\t\t// should be handled before we get here\r\n\t\t\t\t\tconsole.warn(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync edit(item) {\r\n\t\t\ttry {\r\n\t\t\t\tconst filename = Path.combine(this.innerDirectory, item.name);\r\n\t\t\t\tconst response = await this.machineDownload({ filename, type: 'text', showSuccess: false });\r\n\t\t\t\tthis.editDialog.filename = filename;\r\n\t\t\t\tthis.editDialog.content = response;\r\n\t\t\t\tthis.editDialog.shown = true;\r\n\t\t\t} catch (e) {\r\n\t\t\t\tif (!(e instanceof DisconnectedError) && !(e instanceof OperationCancelledError)) {\r\n\t\t\t\t\t// should be handled before we get here\r\n\t\t\t\t\tconsole.warn(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync rename(item) {\r\n\t\t\tthis.renameDialog.directory = this.innerDirectory;\r\n\t\t\tthis.renameDialog.item = (item && item.name) ? item : this.innerValue[0];\r\n\t\t\tthis.renameDialog.shown = true;\r\n\t\t},\r\n\t\tasync renameCallback(newFilename) {\r\n\t\t\tconst oldFilename = this.renameDialog.item.name;\r\n\t\t\tif (this.innerDoingFileOperation) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.innerDoingFileOperation = true;\r\n\t\t\ttry {\r\n\t\t\t\tawait this.machineMove({\r\n\t\t\t\t\tfrom: Path.combine(this.renameDialog.directory, oldFilename),\r\n\t\t\t\t\tto: Path.combine(this.renameDialog.directory, newFilename)\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.innerFilelist.some(function(file) {\r\n\t\t\t\t\tif (file.isDirectory === this.isDirectory && file.name === this.name) {\r\n\t\t\t\t\t\tfile.name = newFilename;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}, this.renameDialog.item);\r\n\r\n\t\t\t\tthis.$makeNotification('success', this.$t('notification.rename.success', [oldFilename, newFilename]));\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.warn(e);\r\n\t\t\t\tthis.$log('error', this.$t('notification.rename.error', [oldFilename, newFilename]), e.message);\r\n\t\t\t}\r\n\t\t\tthis.innerDoingFileOperation = false;\r\n\t\t},\r\n\t\tasync remove(items) {\r\n\t\t\tif (!items || !(items instanceof Array)) {\r\n\t\t\t\titems = this.innerValue.slice();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.innerDoingFileOperation) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.innerDoingFileOperation = true;\r\n\t\t\tconst deletedItems = [], directory = this.directory;\r\n\t\t\tfor (let i = 0; i < items.length; i++) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst item = items[i];\r\n\t\t\t\t\tawait this.machineDelete(Path.combine(directory, item.name));\r\n\r\n\t\t\t\t\tdeletedItems.push(items[i]);\r\n\t\t\t\t\tthis.innerFilelist = this.innerFilelist.filter(file => file.isDirectory !== item.isDirectory || file.name !== item.name);\r\n\t\t\t\t\tthis.innerValue = this.innerValue.filter(file => file.isDirectory !== item.isDirectory || file.name !== item.name);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tthis.$makeNotification('error', this.$t('notification.delete.errorTitle', [items[i].name]), items[i].isDirectory ? this.$t('notification.delete.errorMessageDirectory') : e.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (deletedItems.length) {\r\n\t\t\t\tthis.$log('success', (deletedItems.length > 1) ? this.$t('notification.delete.successMultiple', [deletedItems.length]) : this.$t('notification.delete.success', [deletedItems[0].name]));\r\n\t\t\t}\r\n\t\t\tthis.innerDoingFileOperation = false;\r\n\t\t},\r\n\t\tasync downloadZIP(items) {\r\n\t\t\tif (!items || !(items instanceof Array)) { items = this.innerValue.slice(); }\r\n\t\t\tconst directory = this.directory;\r\n\r\n\t\t\t// Download files\r\n\t\t\tconst zip = new JSZip();\r\n\t\t\tfor (let i = 0; i < items.length; i++) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst blob = await this.machineDownload({ filename: Path.combine(directory, items[i].name), type: 'blob', num: i + 1, count: items.length });\r\n\t\t\t\t\tzip.file(items[i].name, blob);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tif (!(e instanceof DisconnectedError) && !(e instanceof OperationCancelledError)) {\r\n\t\t\t\t\t\t// should be handled before we get here\r\n\t\t\t\t\t\tconsole.warn(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Compress files and save the new archive\r\n\t\t\tconst notification = this.$makeNotification('info', this.$t('notification.compress.title'), this.$t('notification.compress.message'));\r\n\t\t\ttry {\r\n\t\t\t\tconst zipBlob = await zip.generateAsync({ type: 'blob' });\r\n\t\t\t\tsaveAs(zipBlob, 'download.zip');\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.warn(e);\r\n\t\t\t\tthis.$makeNotification('error', this.$t('notification.compress.errorTitle'), e.message);\r\n\t\t\t}\r\n\t\t\tnotification.hide();\r\n\t\t}\r\n\t},\r\n\tmounted() {\r\n\t\t// Perform initial load\r\n\t\tif (this.isConnected) {\r\n\t\t\tconst volume = Path.getVolume(this.innerDirectory);\r\n\t\t\tthis.wasMounted = (volume >= 0) && (volume >= this.volumes.length) && this.volumes[volume].mounted;\r\n\t\t\tthis.refresh();\r\n\t\t}\r\n\r\n\t\t// Keep track of file changes\r\n\t\tconst that = this;\r\n\t\tthis.unsubscribe = this.$store.subscribeAction(async function(action, state) {\r\n\t\t\tif (!that.doingFileOperation && !that.innerDoingFileOperation &&\r\n\t\t\t\tgetModifiedDirectories(action, state).some(directory => Path.equals(directory, that.innerDirectory))) {\r\n\t\t\t\t// Refresh the list when a file or directory has been changed\r\n\t\t\t\tawait that.refresh();\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\tbeforeDestroy() {\r\n\t\tthis.unsubscribe();\r\n\t},\r\n\twatch: {\r\n\t\tisConnected(to) {\r\n\t\t\tif (to) {\r\n\t\t\t\tthis.refresh();\r\n\t\t\t} else {\r\n\t\t\t\tthis.innerDirectory = this.initialDirectory;\r\n\t\t\t\tthis.innerFilelist = [];\r\n\r\n\t\t\t\tthis.editDialog.shown = false;\r\n\t\t\t\tthis.renameDialog.shown = false;\r\n\t\t\t}\r\n\t\t},\r\n\t\tselectedMachine() {\r\n\t\t\t// TODO store current directory per selected machine\r\n\t\t\tthis.innerDirectory = this.initialDirectory;\r\n\t\t\tthis.innerFilelist = [];\r\n\r\n\t\t\tthis.editDialog.shown = false;\r\n\t\t\tthis.renameDialog.shown = false;\r\n\t\t},\r\n\t\tvolumes: {\r\n\t\t\tdeep: true,\r\n\t\t\thandler() {\r\n\t\t\t\tif (this.isConnected) {\r\n\t\t\t\t\tconst volume = Path.getVolume(this.directory);\r\n\t\t\t\t\tif (volume >= 0 && volume < this.volumes.length) {\r\n\t\t\t\t\t\tconst mounted = this.volumes[volume].mounted;\r\n\t\t\t\t\t\tif (this.wasMounted !== mounted) {\r\n\t\t\t\t\t\t\tthis.wasMounted = mounted;\r\n\t\t\t\t\t\t\tthis.refresh();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.wasMounted = false;\r\n\t\t\t\t\t\tthis.refresh();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tdirectory(to) {\r\n\t\t\tif (to !== this.innerDirectory) {\r\n\t\t\t\tthis.loadDirectory(to);\r\n\t\t\t}\r\n\t\t},\r\n\t\tinnerDirectory(to) {\r\n\t\t\tif (this.directory !== to) {\r\n\t\t\t\tthis.$emit('update:directory', to);\r\n\t\t\t}\r\n\t\t},\r\n\t\tinnerFilelist(to) {\r\n\t\t\tif (this.filelist !== to) {\r\n\t\t\t\tthis.$emit('update:filelist', to);\r\n\t\t\t}\r\n\t\t},\r\n\t\tinnerLoading(to) {\r\n\t\t\tif (this.loading !== to) {\r\n\t\t\t\tthis.$emit('update:loading', to);\r\n\t\t\t}\r\n\t\t},\r\n\t\tinnerValue(to) {\r\n\t\t\tif (this.value !== to) {\r\n\t\t\t\tthis.$emit('input', to);\r\n\t\t\t}\r\n\t\t},\r\n\t\t'contextMenu.shown'(to) {\r\n\t\t\tif (!to) {\r\n\t\t\t\t// Restore previously selected items\r\n\t\t\t\tthis.innerValue = this.prevSelection;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n</script>\r\n"]}]}